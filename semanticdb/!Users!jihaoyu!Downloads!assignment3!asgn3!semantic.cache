;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("affine_forward" function
               (:documentation "
  Computes the forward pass for an affine (fully-connected) layer.

  The input x has shape (N, d_1, ..., d_k) where x[i] is the ith input.
  We multiply this against a weight matrix of shape (D, M) where
  D = \\prod_i d_i

  Inputs:
  x - Input data, of shape (N, d_1, ..., d_k)
  w - Weights, of shape (D, M)
  b - Biases, of shape (M,)
  
  Returns a tuple of:
  - out: output, of shape (N, M)
  - cache: (x, w, b)
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [41 42])
                    ("w" variable nil (reparse-symbol function_parameters) [44 45])
                    ("b" variable nil (reparse-symbol function_parameters) [47 48]))                  )
                nil [22 566])
            ("affine_backward" function
               (:documentation "
  Computes the backward pass for an affine layer.

  Inputs:
  - dout: Upstream derivative, of shape (N, M)
  - cache: Tuple of:
    - x: Input data, of shape (N, d_1, ... d_k)
    - w: Weights, of shape (D, M)

  Returns a tuple of:
  - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)
  - dw: Gradient with respect to w, of shape (D, M)
  - db: Gradient with respect to b, of shape (M,)
  "
                :arguments 
                  ( ("dout" variable nil (reparse-symbol function_parameters) [588 592])
                    ("cache" variable nil (reparse-symbol function_parameters) [594 599]))                  )
                nil [568 1162])
            ("relu_forward" function
               (:documentation "
  Computes the forward pass for a layer of rectified linear units (ReLUs).

  Input:
  - x: Inputs, of any shape

  Returns a tuple of:
  - out: Output, of the same shape as x
  - cache: x
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [1181 1182]))                  )
                nil [1164 1443])
            ("relu_backward" function
               (:documentation "
  Computes the backward pass for a layer of rectified linear units (ReLUs).

  Input:
  - dout: Upstream derivatives, of any shape
  - cache: Input x, of same shape as dout

  Returns:
  - dx: Gradient with respect to x
  "
                :arguments 
                  ( ("dout" variable nil (reparse-symbol function_parameters) [1463 1467])
                    ("cache" variable nil (reparse-symbol function_parameters) [1469 1474]))                  )
                nil [1445 1765])
            ("batchnorm_forward" function
               (:documentation "
  Forward pass for batch normalization.
  
  During training the sample mean and (uncorrected) sample variance are
  computed from minibatch statistics and used to normalize the incoming data.
  During training we also keep an exponentially decaying running mean of the mean
  and variance of each feature, and these averages are used to normalize data
  at test-time.

  At each timestep we update the running averages for mean and variance using
  an exponential decay based on the momentum parameter:

  running_mean = momentum * running_mean + (1 - momentum) * sample_mean
  running_var = momentum * running_var + (1 - momentum) * sample_var

  Note that the batch normalization paper suggests a different test-time
  behavior: they compute sample mean and variance for each feature using a
  large number of training images rather than using a running average. For
  this implementation we have chosen to use running averages instead since
  they do not require an additional estimation step; the torch7 implementation
  of batch normalization also uses running averages.

  Input:
  - x: Data of shape (N, D)
  - gamma: Scale parameter of shape (D,)
  - beta: Shift paremeter of shape (D,)
  - bn_param: Dictionary with the following keys:
    - mode: 'train' or 'test'; required
    - eps: Constant for numeric stability
    - momentum: Constant for running mean / variance.
    - running_mean: Array of shape (D,) giving running mean of features
    - running_var Array of shape (D,) giving running variance of features

  Returns a tuple of:
  - out: of shape (N, D)
  - cache: A tuple of values needed in the backward pass
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [1789 1790])
                    ("gamma" variable nil (reparse-symbol function_parameters) [1792 1797])
                    ("beta" variable nil (reparse-symbol function_parameters) [1799 1803])
                    ("bn_param" variable nil (reparse-symbol function_parameters) [1805 1813]))                  )
                nil [1767 4664])
            ("batchnorm_backward" function
               (:documentation "
  Backward pass for batch normalization.
  
  For this implementation, you should write out a computation graph for
  batch normalization on paper and propagate gradients backward through
  intermediate nodes.
  
  Inputs:
  - dout: Upstream derivatives, of shape (N, D)
  - cache: Variable of intermediates from batchnorm_forward.
  
  Returns a tuple of:
  - dx: Gradient with respect to inputs x, of shape (N, D)
  - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)
  - dbeta: Gradient with respect to shift parameter beta, of shape (D,)
  "
                :arguments 
                  ( ("dout" variable nil (reparse-symbol function_parameters) [4689 4693])
                    ("cache" variable nil (reparse-symbol function_parameters) [4695 4700]))                  )
                nil [4666 5898])
            ("spatial_batchnorm_forward" function
               (:documentation "
  Computes the forward pass for spatial batch normalization.
  
  Inputs:
  - x: Input data of shape (N, C, H, W)
  - gamma: Scale parameter, of shape (C,)
  - beta: Shift parameter, of shape (C,)
  - bn_param: Dictionary with the following keys:
    - mode: 'train' or 'test'; required
    - eps: Constant for numeric stability
    - momentum: Constant for running mean / variance. momentum=0 means that
      old information is discarded completely at every time step, while
      momentum=1 means that new information is never incorporated. The
      default of momentum=0.9 should work well in most situations.
    - running_mean: Array of shape (D,) giving running mean of features
    - running_var Array of shape (D,) giving running variance of features
    
  Returns a tuple of:
  - out: Output data, of shape (N, C, H, W)
  - cache: Values needed for the backward pass
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [5930 5931])
                    ("gamma" variable nil (reparse-symbol function_parameters) [5933 5938])
                    ("beta" variable nil (reparse-symbol function_parameters) [5940 5944])
                    ("bn_param" variable nil (reparse-symbol function_parameters) [5946 5954]))                  )
                nil [5900 7069])
            ("spatial_batchnorm_backward" function
               (:documentation "
  Computes the backward pass for spatial batch normalization.
  
  Inputs:
  - dout: Upstream derivatives, of shape (N, C, H, W)
  - cache: Values from the forward pass
  
  Returns a tuple of:
  - dx: Gradient with respect to inputs, of shape (N, C, H, W)
  - dgamma: Gradient with respect to scale parameter, of shape (C,)
  - dbeta: Gradient with respect to shift parameter, of shape (C,)
  "
                :arguments 
                  ( ("dout" variable nil (reparse-symbol function_parameters) [7102 7106])
                    ("cache" variable nil (reparse-symbol function_parameters) [7108 7113]))                  )
                nil [7071 7750])
            ("svm_loss" function
               (:documentation "
  Computes the loss and gradient using for multiclass SVM classification.

  Inputs:
  - x: Input data, of shape (N, C) where x[i, j] is the score for the jth class
    for the ith input.
  - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and
    0 <= y[i] < C

  Returns a tuple of:
  - loss: Scalar giving the loss
  - dx: Gradient of the loss with respect to x
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7765 7766])
                    ("y" variable nil (reparse-symbol function_parameters) [7768 7769]))                  )
                nil [7752 8510])
            ("softmax_loss" function
               (:documentation "
  Computes the loss and gradient for softmax classification.

  Inputs:
  - x: Input data, of shape (N, C) where x[i, j] is the score for the jth class
    for the ith input.
  - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and
    0 <= y[i] < C

  Returns a tuple of:
  - loss: Scalar giving the loss
  - dx: Gradient of the loss with respect to x
  "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8529 8530])
                    ("y" variable nil (reparse-symbol function_parameters) [8532 8533]))                  )
                nil [8512 9168]))          
      :file "layers.py"
      :pointmax 9169
      :fsize 9168
      :lastmodtime '(22203 57886 0 0)
      :unmatched-syntax nil))
  :file "!Users!jihaoyu!Downloads!assignment3!asgn3!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
