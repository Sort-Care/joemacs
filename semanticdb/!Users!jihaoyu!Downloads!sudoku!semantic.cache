;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"CSP (Constraint Satisfaction Problems) problems and solvers. (Chapter 6).\"\"\"" code nil nil [1 80])
            ("utils" include nil nil [82 142])
            ("collections" include nil nil [144 186])
            ("functools" include nil nil [187 215])
            ("naked_subsets" include nil nil [216 255])
            ("itertools" include nil nil [257 273])
            ("statistics" include nil nil [274 291])
            ("re" include nil nil [292 301])
            ("random" include nil nil [302 315])
            ("copy" include nil nil [316 327])
            ("CSP" type
               (:documentation "This class describes finite-domain Constraint Satisfaction Problems.
    A CSP is specified by the following inputs:
        variables   A list of variables; each is atomic (e.g. int or string).
        domains     A dict of {var:[possible_value, ...]} entries.
        neighbors   A dict of {var:[var,...]} that for each variable lists
                    the other variables that participate in constraints.
        constraints A function f(A, a, B, b) that returns true if neighbors
                    A, B satisfy the constraint when they have values A=a, B=b
    In the textbook and in most mathematical definitions, the
    constraints are specified as explicit pairs of allowable values,
    but the formulation here is easier to express and more compact for
    most cases. (For example, the n-Queens problem can be represented
    in O(n) space using this notation, instead of O(N^4) for the
    explicit representation.) In terms of describing the CSP as a
    problem, that's all there is.
    However, the class also supports data structures and methods that help you
    solve CSPs by calling a search function on the CSP. Methods and slots are
    as follows, where the argument 'a' represents an assignment, which is a
    dict of {var:val} entries:
        assign(var, val, a)     Assign a[var] = val; do other bookkeeping
        unassign(var, a)        Do del a[var], plus other bookkeeping
        nconflicts(var, val, a) Return the number of other variables that
                                conflict with var=val
        curr_domains[var]       Slot: remaining consistent values for var
                                Used by constraint propagation routines.
    The following methods are used only by graph_search and tree_search:
        actions(state)          Return a list of actions
        result(state, action)   Return a successor of state
        goal_test(state)        Return true if all constraints satisfied
    The following are just for debugging purposes:
        nassigns                Slot: tracks the number of assignments made
        display(a)              Print a human-readable representation
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a CSP problem. If variables is empty, it becomes domains.keys().\"\"\"" code nil (reparse-symbol indented_block_body) [2586 2666])
                            ("variables" code nil (reparse-symbol indented_block_body) [2675 2720])
                            ("self" variable nil (reparse-symbol indented_block_body) [2730 2756])
                            ("self" variable nil (reparse-symbol indented_block_body) [2765 2787])
                            ("self" variable nil (reparse-symbol indented_block_body) [2796 2822])
                            ("self" variable nil (reparse-symbol indented_block_body) [2831 2861])
                            ("self" variable nil (reparse-symbol indented_block_body) [2870 2887])
                            ("self" variable nil (reparse-symbol indented_block_body) [2896 2920])
                            ("self" variable nil (reparse-symbol indented_block_body) [2929 2946]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2527 2531])
                            ("variables" variable nil (reparse-symbol function_parameters) [2533 2542])
                            ("domains" variable nil (reparse-symbol function_parameters) [2544 2551])
                            ("neighbors" variable nil (reparse-symbol function_parameters) [2553 2562])
                            ("constraints" variable nil (reparse-symbol function_parameters) [2564 2575]))                          
                        :documentation "Construct a CSP problem. If variables is empty, it becomes domains.keys()."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2514 2947])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2963 2967])
                            ("var" variable nil (reparse-symbol function_parameters) [2969 2972])
                            ("val" variable nil (reparse-symbol function_parameters) [2974 2977])
                            ("assignment" variable nil (reparse-symbol function_parameters) [2979 2989]))                          
                        :documentation "Add {var: val} to assignment; Discard the old value if any.")
                        (reparse-symbol indented_block_body) [2952 3123])
                    ("unassign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3141 3145])
                            ("var" variable nil (reparse-symbol function_parameters) [3147 3150])
                            ("assignment" variable nil (reparse-symbol function_parameters) [3152 3162]))                          
                        :documentation "Remove {var: val} from assignment.
        DO NOT call this if you are changing a variable to a new value;
        just call assign for that.")
                        (reparse-symbol indented_block_body) [3128 3383])
                    ("nconflicts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3403 3407])
                            ("var" variable nil (reparse-symbol function_parameters) [3409 3412])
                            ("val" variable nil (reparse-symbol function_parameters) [3414 3417])
                            ("assignment" variable nil (reparse-symbol function_parameters) [3419 3429]))                          
                        :documentation "Return the number of conflicts var=val has with other variables.")
                        (reparse-symbol indented_block_body) [3388 4037])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4054 4058])
                            ("assignment" variable nil (reparse-symbol function_parameters) [4060 4070]))                          
                        :documentation "Show a human-readable representation of the CSP.")
                        (reparse-symbol indented_block_body) [4042 4268])
                    ("support_pruning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4337 4341]))                          
                        :documentation "Make sure we can prune values from domains. (We want to pay
        for this only if we use it.)")
                        (reparse-symbol indented_block_body) [4317 4576])
                    ("suppose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4593 4597])
                            ("var" variable nil (reparse-symbol function_parameters) [4599 4602])
                            ("value" variable nil (reparse-symbol function_parameters) [4604 4609]))                          
                        :documentation "Start accumulating inferences from assuming var=value.")
                        (reparse-symbol indented_block_body) [4581 4853])
                    ("prune" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4868 4872])
                            ("var" variable nil (reparse-symbol function_parameters) [4874 4877])
                            ("value" variable nil (reparse-symbol function_parameters) [4879 4884])
                            ("removals" variable nil (reparse-symbol function_parameters) [4886 4894]))                          
                        :documentation "Rule out var=value.")
                        (reparse-symbol indented_block_body) [4858 5051])
                    ("choices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5068 5072])
                            ("var" variable nil (reparse-symbol function_parameters) [5074 5077]))                          
                        :documentation "Return all values for var that aren't currently ruled out.")
                        (reparse-symbol indented_block_body) [5056 5209])
                    ("infer_assignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5235 5239]))                          
                        :documentation "Return the partial assignment implied by the current inferences.")
                        (reparse-symbol indented_block_body) [5214 5470])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5487 5491])
                            ("removals" variable nil (reparse-symbol function_parameters) [5493 5501]))                          
                        :documentation "Undo a supposition and all inferences from it.")
                        (reparse-symbol indented_block_body) [5475 5638]))                  
                :type "class")
                nil [330 5638])
            ("AC3" function
               (:documentation "[Figure 6.3]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [5765 5768])
                    ("queue" variable nil (reparse-symbol function_parameters) [5770 5775])
                    ("removals" variable nil (reparse-symbol function_parameters) [5782 5790]))                  )
                nil [5757 6237])
            ("revise" function
               (:documentation "Return true if we remove a value."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [6250 6253])
                    ("Xi" variable nil (reparse-symbol function_parameters) [6255 6257])
                    ("Xj" variable nil (reparse-symbol function_parameters) [6259 6261])
                    ("removals" variable nil (reparse-symbol function_parameters) [6263 6271]))                  )
                nil [6239 6617])
            ("confined_row" function
               (:documentation "Decide if a candidate in a box is confined in a row"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [6635 6638])
                    ("variables" variable nil (reparse-symbol function_parameters) [6640 6649])
                    ("candidate" variable nil (reparse-symbol function_parameters) [6651 6660])
                    ("box" variable nil (reparse-symbol function_parameters) [6662 6665]))                  )
                nil [6618 6922])
            ("confined_col" function
               (:documentation "Decide if a candidate in a box is confined in a column"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [6940 6943])
                    ("variables" variable nil (reparse-symbol function_parameters) [6945 6954])
                    ("candidate" variable nil (reparse-symbol function_parameters) [6956 6965])
                    ("box" variable nil (reparse-symbol function_parameters) [6967 6970]))                  )
                nil [6923 7229])
            ("confined_box" function
               (:documentation "Decide if a candidate in a box is confined in this box"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [7247 7250])
                    ("variables" variable nil (reparse-symbol function_parameters) [7252 7261])
                    ("candidate" variable nil (reparse-symbol function_parameters) [7263 7272])
                    ("box" variable nil (reparse-symbol function_parameters) [7274 7277]))                  )
                nil [7230 7354])
            ("first_unassigned_variable" function
               (:documentation "The default variable order."
                :arguments 
                  ( ("assignment" variable nil (reparse-symbol function_parameters) [7516 7526])
                    ("csp" variable nil (reparse-symbol function_parameters) [7528 7531]))                  )
                nil [7486 7646])
            ("mrv" function
               (:documentation "Minimum-remaining-values heuristic."
                :arguments 
                  ( ("assignment" variable nil (reparse-symbol function_parameters) [7656 7666])
                    ("csp" variable nil (reparse-symbol function_parameters) [7668 7671]))                  )
                nil [7648 7873])
            ("num_legal_values" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [7896 7899])
                ("var" variable nil (reparse-symbol function_parameters) [7901 7904])
                ("assignment" variable nil (reparse-symbol function_parameters) [7906 7916]))              ) nil [7875 8109])
            ("unordered_domain_values" function
               (:documentation "The default value order."
                :arguments 
                  ( ("var" variable nil (reparse-symbol function_parameters) [8157 8160])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8162 8172])
                    ("csp" variable nil (reparse-symbol function_parameters) [8174 8177]))                  )
                nil [8129 8243])
            ("lcv" function
               (:documentation "Least-constraining-values heuristic."
                :arguments 
                  ( ("var" variable nil (reparse-symbol function_parameters) [8253 8256])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8258 8268])
                    ("csp" variable nil (reparse-symbol function_parameters) [8270 8273]))                  )
                nil [8245 8431])
            ("no_inference" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [8463 8466])
                ("var" variable nil (reparse-symbol function_parameters) [8468 8471])
                ("value" variable nil (reparse-symbol function_parameters) [8473 8478])
                ("assignment" variable nil (reparse-symbol function_parameters) [8480 8490])
                ("removals" variable nil (reparse-symbol function_parameters) [8492 8500]))              ) nil [8446 8519])
            ("forward_checking" function
               (:documentation "Prune neighbor values inconsistent with var=value."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [8542 8545])
                    ("var" variable nil (reparse-symbol function_parameters) [8547 8550])
                    ("value" variable nil (reparse-symbol function_parameters) [8552 8557])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8559 8569])
                    ("removals" variable nil (reparse-symbol function_parameters) [8571 8579]))                  )
                nil [8521 8942])
            ("mac" function
               (:documentation "Maintain arc consistency."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [8952 8955])
                    ("var" variable nil (reparse-symbol function_parameters) [8957 8960])
                    ("value" variable nil (reparse-symbol function_parameters) [8962 8967])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8969 8979])
                    ("removals" variable nil (reparse-symbol function_parameters) [8981 8989]))                  )
                nil [8944 9098])
            ("hidden_single" function
               (:documentation "Find hidden singles in the Sudoku puzzle"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [9117 9120])
                    ("variable" variable nil (reparse-symbol function_parameters) [9122 9130])
                    ("value" variable nil (reparse-symbol function_parameters) [9132 9137])
                    ("assignment" variable nil (reparse-symbol function_parameters) [9139 9149])
                    ("removals" variable nil (reparse-symbol function_parameters) [9151 9159]))                  )
                nil [9099 10073])
            ("locked_candidates" function
               (:documentation "Find locked candidates (Pointing & Claiming)"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [10096 10099])
                    ("var" variable nil (reparse-symbol function_parameters) [10101 10104])
                    ("val" variable nil (reparse-symbol function_parameters) [10106 10109])
                    ("assignment" variable nil (reparse-symbol function_parameters) [10111 10121])
                    ("removals" variable nil (reparse-symbol function_parameters) [10123 10131]))                  )
                nil [10074 11524])
            ("waterfall" function
               (:documentation "
    Apply a waterfall of inferences
    Add whatever inference you like into all_inferences
    The waterfall will stop until no more effects incurr
    "
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [11543 11546])
                    ("var" variable nil (reparse-symbol function_parameters) [11548 11551])
                    ("val" variable nil (reparse-symbol function_parameters) [11553 11556])
                    ("assignment" variable nil (reparse-symbol function_parameters) [11558 11568])
                    ("removals" variable nil (reparse-symbol function_parameters) [11570 11578]))                  )
                nil [11529 12205])
            ("backtracking_search" function
               (:documentation "[Figure 6.5]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [12254 12257])
                    ("assignment" variable nil (reparse-symbol function_parameters) [12259 12269])
                    ("select_unassigned_variable" variable nil (reparse-symbol function_parameters) [12298 12324])
                    ("order_domain_values" variable nil (reparse-symbol function_parameters) [12376 12395])
                    ("inference" variable nil (reparse-symbol function_parameters) [12445 12454]))                  )
                nil [12230 13480])
            ("backtracking_search_guess" function
               (:documentation "[Figure 6.5]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [13514 13517])
                    ("assignment" variable nil (reparse-symbol function_parameters) [13519 13529])
                    ("select_unassigned_variable" variable nil (reparse-symbol function_parameters) [13564 13590])
                    ("order_domain_values" variable nil (reparse-symbol function_parameters) [13648 13667])
                    ("inference" variable nil (reparse-symbol function_parameters) [13723 13732])
                    ("inferlist" variable nil (reparse-symbol function_parameters) [13777 13786]))                  )
                nil [13484 14746])
            ("waterfall_levels" function
               (:documentation "
    Apply a waterfall of inferences
    Add whatever inference you like into all_inferences
    The waterfall will stop until no more effects incurr
    "
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [14769 14772])
                    ("var" variable nil (reparse-symbol function_parameters) [14774 14777])
                    ("val" variable nil (reparse-symbol function_parameters) [14779 14782])
                    ("assignment" variable nil (reparse-symbol function_parameters) [14784 14794])
                    ("removals" variable nil (reparse-symbol function_parameters) [14796 14804])
                    ("inferlist" variable nil (reparse-symbol function_parameters) [14806 14815]))                  )
                nil [14748 15436])
            ("Sudoku" type
               (:documentation "
    Author: Haoyu Ji, Hanwen Xiong
    This is a class for constructing Sudoku problem.
    Sudoku world is a 3x3 boxes each containing 3x3 cells.
    List xxx holds 81 variables for each cell,
    dict xxx holds 81 keys whose values correspond to its domains.
    "
                :superclasses ("CSP")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15897 15909])
                            ("self" variable nil (reparse-symbol indented_block_body) [15918 15930])
                            ("self" variable nil (reparse-symbol indented_block_body) [15939 15957])
                            ("variables" variable nil (reparse-symbol indented_block_body) [15967 16005])
                            ("domains" variable nil (reparse-symbol indented_block_body) [16014 16081])
                            ("neighbors" variable nil (reparse-symbol indented_block_body) [16090 16143])
                            ("for" code nil (reparse-symbol indented_block_body) [16152 16628])
                            ("super" code nil (reparse-symbol indented_block_body) [16637 16709]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15843 15847]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15830 16671])
                    ("read_sudoku" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16692 16696])
                            ("filename" variable nil (reparse-symbol function_parameters) [16698 16706]))                          
                        :documentation "
        Read Sudoku from file with format:
        - 1 9 - - - - - -
        - - 8 - - 3 - 5 -
        - 7 - 6 - - - 8 -
        - - 1 - - 6 8 - 9
        8 - - - 4 - - - 7
        9 4 - - - - - 1 -
        - - - - - 2 - - -
        - - - - 8 - 5 6 1
        - - 3 7 - - - 9 -
        ")
                        (reparse-symbol indented_block_body) [16676 17351])
                    ("print_sudoku" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17373 17377])
                            ("filename" variable nil (reparse-symbol function_parameters) [17379 17387]))                          
                        :documentation "
        Print Sudoku solution to file with the same format
        ")
                        (reparse-symbol indented_block_body) [17356 17800])
                    ("display_puzzle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17824 17828]))                          
                        :documentation "
        Display puzzle on screen (standard output)
        ")
                        (reparse-symbol indented_block_body) [17805 18212])
                    ("display_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18236 18240]))                          
                        :documentation "
        Display solution to this puzzle on screen (standard output)
        ")
                        (reparse-symbol indented_block_body) [18217 18531])
                    ("sudoku_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18559 18563])
                            ("A" variable nil (reparse-symbol function_parameters) [18565 18566])
                            ("a" variable nil (reparse-symbol function_parameters) [18568 18569])
                            ("B" variable nil (reparse-symbol function_parameters) [18571 18572])
                            ("b" variable nil (reparse-symbol function_parameters) [18574 18575]))                          
                        :documentation "
        r and l are row and column of a variable in a sudoku world
        b is coordinates of the box in which a variable lies
        ")
                        (reparse-symbol indented_block_body) [18536 19047]))                  
                :type "class")
                nil [15529 19047])
            ("Sudoku_solver" function
               (:documentation "
    Solve an instance of Sudoku
    AC3 is used as a preprocessing in order to maintain consistency of curr_domains
    "
                :arguments 
                  ( ("sudoku" variable nil (reparse-symbol function_parameters) [19067 19073])
                    ("inference" variable nil (reparse-symbol function_parameters) [19075 19084]))                  )
                nil [19049 19619])
            ("evaluate_sudoku" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [19641 19649]))              ) nil [19621 20317])
            ("calculate_difficulty" function (:arguments 
              ( ("scores" variable nil (reparse-symbol function_parameters) [20343 20349]))              ) nil [20318 20581])
            ("evaluate_levels" function (:arguments 
              ( ("sudoku" variable nil (reparse-symbol function_parameters) [20611 20617])
                ("assignment" variable nil (reparse-symbol function_parameters) [20619 20629])
                ("level" variable nil (reparse-symbol function_parameters) [20631 20636]))              ) nil [20591 21374])
            ("benchmark" function nil nil [21376 22373])
            ("create_sudoku_from_file" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [22717 22725]))              ) nil [22689 22846])
            ("\"\"\"
Modify the file name to choose whatever puzzle you want to solve
\"\"\"" code nil nil [22852 22924])
            ("sys" include nil nil [22926 22936])
            ("os.path" include nil nil [22937 22951])
            ("if" code nil nil [22966 25017]))          
      :file "sudoku.py"
      :pointmax 25030
      :fsize 25029
      :lastmodtime '(23192 54848 871602 700000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Provides some utilities widely used by other modules\"\"\"" code nil nil [1 59])
            ("bisect" include nil nil [61 74])
            ("collections" include nil nil [75 93])
            ("collections.abc" include nil nil [94 116])
            ("operator" include nil nil [117 132])
            ("os.path" include nil nil [133 147])
            ("random" include nil nil [148 161])
            ("math" include nil nil [162 173])
            ("functools" include nil nil [174 190])
            ("itertools" include nil nil [191 232])
            ("sequence" function
               (:documentation "Coerce iterable to sequence, if it is not already one."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [370 378]))                  )
                nil [357 551])
            ("removeall" function
               (:documentation "Return a copy of seq (or string) with all occurences of item removed."
                :arguments 
                  ( ("item" variable nil (reparse-symbol function_parameters) [567 571])
                    ("seq" variable nil (reparse-symbol function_parameters) [573 576]))                  )
                nil [553 780])
            ("unique" function
               (:documentation "Remove duplicate elements from seq. Assumes hashable elements."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [793 796]))                  )
                nil [782 924])
            ("count" function
               (:documentation "Count the number of items in sequence that are interpreted as true."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [936 939]))                  )
                nil [926 1057])
            ("product" function
               (:documentation "Return the product of the numbers, e.g. product([2, 3, 10]) == 60"
                :arguments 
                  ( ("numbers" variable nil (reparse-symbol function_parameters) [1071 1078]))                  )
                nil [1059 1232])
            ("first" function
               (:documentation "Return the first element of an iterable or the next element of a generator; or default."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [1244 1252])
                    ("default" variable nil (reparse-symbol function_parameters) [1254 1261]))                  )
                nil [1234 1510])
            ("is_in" function
               (:documentation "Similar to (elt in seq), but compares with 'is', not '=='."
                :arguments 
                  ( ("elt" variable nil (reparse-symbol function_parameters) [1522 1525])
                    ("seq" variable nil (reparse-symbol function_parameters) [1527 1530]))                  )
                nil [1512 1640])
            ("mode" function
               (:documentation "Return the most common data item. If there are ties, return any one of them."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [1651 1655]))                  )
                nil [1642 1824])
            ("powerset" function
               (:documentation "powerset([1,2,3]) --> (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [1839 1847]))                  )
                nil [1826 2032])
            ("identity" variable nil nil [2137 2159])
            ("argmin" variable nil nil [2161 2173])
            ("argmax" variable nil nil [2174 2186])
            ("argmin_random_tie" function
               (:documentation "Return a minimum element of seq; break ties at random."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [2211 2214])
                    ("key" variable nil (reparse-symbol function_parameters) [2216 2219]))                  )
                nil [2189 2360])
            ("argmax_random_tie" function
               (:documentation "Return an element with highest fn(seq[i]) score; break ties at random."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [2384 2387])
                    ("key" variable nil (reparse-symbol function_parameters) [2389 2392]))                  )
                nil [2362 2527])
            ("shuffled" function
               (:documentation "Randomly shuffle a copy of iterable."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [2542 2550]))                  )
                nil [2529 2670])
            ("histogram" function
               (:documentation "Return a list of (value, count) pairs, summarizing the input values.
    Sorted by increasing value, or if mode=1, by decreasing count.
    If bin_function is given, map it over values first."
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [2810 2816])
                    ("mode" variable nil (reparse-symbol function_parameters) [2818 2822])
                    ("bin_function" variable nil (reparse-symbol function_parameters) [2826 2838]))                  )
                nil [2796 3357])
            ("dotproduct" function
               (:documentation "Return the sum of the element-wise product of vectors X and Y."
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [3374 3375])
                    ("Y" variable nil (reparse-symbol function_parameters) [3377 3378]))                  )
                nil [3359 3498])
            ("element_wise_product" function
               (:documentation "Return vector as an element-wise product of vectors X and Y"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [3525 3526])
                    ("Y" variable nil (reparse-symbol function_parameters) [3528 3529]))                  )
                nil [3500 3671])
            ("matrix_multiplication" function
               (:documentation "Return a matrix as a matrix-multiplication of X_M and arbitary number of matrices *Y_M"
                :arguments 
                  ( ("X_M" variable nil (reparse-symbol function_parameters) [3699 3702])
                    ("Y_M" variable nil (reparse-symbol function_parameters) [3704 3708]))                  )
                nil [3673 4590])
            ("vector_to_diagonal" function
               (:documentation "Converts a vector to a diagonal matrix with vector elements
    as the diagonal elements of the matrix"
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [4615 4616]))                  )
                nil [4592 4887])
            ("vector_add" function
               (:documentation "Component-wise addition of two vectors."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [4904 4905])
                    ("b" variable nil (reparse-symbol function_parameters) [4907 4908]))                  )
                nil [4889 5003])
            ("scalar_vector_product" function
               (:documentation "Return vector as a product of a scalar and a vector"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5031 5032])
                    ("Y" variable nil (reparse-symbol function_parameters) [5034 5035]))                  )
                nil [5005 5130])
            ("scalar_matrix_product" function
               (:documentation "Return matrix as a product of a scalar and a matrix"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5158 5159])
                    ("Y" variable nil (reparse-symbol function_parameters) [5161 5162]))                  )
                nil [5132 5279])
            ("inverse_matrix" function
               (:documentation "Inverse a given square matrix of size 2x2"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5300 5301]))                  )
                nil [5281 5582])
            ("probability" function
               (:documentation "Return true with probability p."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [5600 5601]))                  )
                nil [5584 5686])
            ("weighted_sample_with_replacement" function
               (:documentation "Pick n samples from seq at random, with replacement, with the
    probability of each element in proportion to its corresponding
    weight."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [5725 5726])
                    ("seq" variable nil (reparse-symbol function_parameters) [5728 5731])
                    ("weights" variable nil (reparse-symbol function_parameters) [5733 5740]))                  )
                nil [5688 5979])
            ("weighted_sampler" function
               (:documentation "Return a random-sample function that picks from seq weighted by weights."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [6002 6005])
                    ("weights" variable nil (reparse-symbol function_parameters) [6007 6014]))                  )
                nil [5981 6271])
            ("rounder" function
               (:documentation "Round a single number, or sequence of numbers, to d decimal places."
                :arguments 
                  ( ("numbers" variable nil (reparse-symbol function_parameters) [6285 6292])
                    ("d" variable nil (reparse-symbol function_parameters) [6294 6295]))                  )
                nil [6273 6594])
            ("num_or_str" function
               (:documentation "The argument is a string; convert to a number if
       possible, or strip it."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6611 6612]))                  )
                nil [6596 6860])
            ("normalize" function
               (:documentation "Multiply each number by a constant such that the sum is 1.0"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [6876 6880]))                  )
                nil [6862 7248])
            ("norm" function
               (:documentation "Return the n-norm of vector X"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [7259 7260])
                    ("n" variable nil (reparse-symbol function_parameters) [7262 7263]))                  )
                nil [7250 7349])
            ("clip" function
               (:documentation "Return x clipped to the range [lowest..highest]."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7360 7361])
                    ("lowest" variable nil (reparse-symbol function_parameters) [7363 7369])
                    ("highest" variable nil (reparse-symbol function_parameters) [7371 7378]))                  )
                nil [7351 7480])
            ("sigmoid_derivative" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7505 7510]))              ) nil [7482 7544])
            ("sigmoid" function
               (:documentation "Return activation value of x with sigmoid function"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7558 7559]))                  )
                nil [7546 7655])
            ("step" function
               (:documentation "Return activation value of x with sign function"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7666 7667]))                  )
                nil [7657 7758])
            ("gaussian" function
               (:documentation "Given the mean and standard deviation of a distribution, it returns the probability of x."
                :arguments 
                  ( ("mean" variable nil (reparse-symbol function_parameters) [7773 7777])
                    ("st_dev" variable nil (reparse-symbol function_parameters) [7779 7785])
                    ("x" variable nil (reparse-symbol function_parameters) [7787 7788]))                  )
                nil [7760 7975])
            ("try" code nil nil [7977 8289])
            ("weighted_choice" function
               (:documentation "A weighted version of random.choice"
                :arguments 
                  ( ("choices" variable nil (reparse-symbol function_parameters) [8311 8318]))                  )
                nil [8291 8620])
            ("orientations" variable nil nil [8722 8798])
            ("turns" variable nil nil [8799 8829])
            ("turn_heading" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [8849 8856])
                ("inc" variable nil (reparse-symbol function_parameters) [8858 8861])
                ("headings" variable nil (reparse-symbol function_parameters) [8863 8871]))              ) nil [8832 8956])
            ("turn_right" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [8973 8980]))              ) nil [8958 9023])
            ("turn_left" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [9039 9046]))              ) nil [9025 9088])
            ("distance" function
               (:documentation "The distance between two (x, y) points."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [9103 9104])
                    ("b" variable nil (reparse-symbol function_parameters) [9106 9107]))                  )
                nil [9090 9234])
            ("distance_squared" function
               (:documentation "The square of the distance between two (x, y) points."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [9257 9258])
                    ("b" variable nil (reparse-symbol function_parameters) [9260 9261]))                  )
                nil [9236 9397])
            ("vector_clip" function
               (:documentation "Return vector, except if any element is less than the corresponding
    value of lowest or more than the corresponding value of highest, clip to
    those values."
                :arguments 
                  ( ("vector" variable nil (reparse-symbol function_parameters) [9415 9421])
                    ("lowest" variable nil (reparse-symbol function_parameters) [9423 9429])
                    ("highest" variable nil (reparse-symbol function_parameters) [9431 9438]))                  )
                nil [9399 9674])
            ("memoize" function
               (:documentation "Memoize fn: make it remember the computed value for any argument list.
    If slot is specified, store result in that slot of first argument.
    If slot is false, use lru_cache for caching the values."
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [9788 9790])
                    ("slot" variable nil (reparse-symbol function_parameters) [9792 9796])
                    ("maxsize" variable nil (reparse-symbol function_parameters) [9803 9810]))                  )
                nil [9776 10418])
            ("name" function
               (:documentation "Try to find some reasonable name for the object."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [10429 10432]))                  )
                nil [10420 10654])
            ("isnumber" function
               (:documentation "Is x a number?"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [10669 10670]))                  )
                nil [10656 10731])
            ("issequence" function
               (:documentation "Is x a sequence?"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [10748 10749]))                  )
                nil [10733 10830])
            ("print_table" function
               (:documentation "Print a list of lists as a table, so that columns line up nicely.
    header, if specified, will be printed as the first row.
    numfmt is the format for all numbers; you might want e.g. '{:.2f}'.
    (If you want different formats in different columns,
    don't use print_table.) sep is the separator between columns."
                :arguments 
                  ( ("table" variable nil (reparse-symbol function_parameters) [10848 10853])
                    ("header" variable nil (reparse-symbol function_parameters) [10855 10861])
                    ("sep" variable nil (reparse-symbol function_parameters) [10868 10871])
                    ("numfmt" variable nil (reparse-symbol function_parameters) [10879 10885]))                  )
                nil [10832 11698])
            ("open_data" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [11714 11718])
                ("mode" variable nil (reparse-symbol function_parameters) [11720 11724]))              ) nil [11700 11863])
            ("failure_test" function
               (:documentation "Grades the given algorithm based on how many tests it passes.
    Most algorithms have arbitary output on correct execution, which is difficult
    to check for correctness. On the other hand, a lot of algorithms output something
    particular on fail (for example, False, or None).
    tests is a list with each element in the form: (values, failure_output)."
                :arguments 
                  ( ("algorithm" variable nil (reparse-symbol function_parameters) [11882 11891])
                    ("tests" variable nil (reparse-symbol function_parameters) [11893 11898]))                  )
                nil [11865 12362])
            ("Expr" type
               (:documentation "A mathematical expression with an operator and 0 or more arguments.
    op is a str like '+' or 'sin'; args are Expressions.
    Expr('x') or Symbol('x') creates a symbol (a nullary Expr).
    Expr('-', x) creates a unary; Expr('+', x, 1) creates a binary."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12949 12966])
                            ("self" variable nil (reparse-symbol indented_block_body) [12975 12991]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12923 12927])
                            ("op" variable nil (reparse-symbol function_parameters) [12929 12931])
                            ("args" variable nil (reparse-symbol function_parameters) [12933 12938]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12910 12992])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13034 13038]))                          )
                        (reparse-symbol indented_block_body) [13022 13072])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13089 13093]))                          )
                        (reparse-symbol indented_block_body) [13077 13127])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13147 13151]))                          )
                        (reparse-symbol indented_block_body) [13132 13185])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13202 13206])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13208 13211]))                          )
                        (reparse-symbol indented_block_body) [13190 13250])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13267 13271])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13273 13276]))                          )
                        (reparse-symbol indented_block_body) [13255 13315])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13332 13336])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13338 13341]))                          )
                        (reparse-symbol indented_block_body) [13320 13380])
                    ("__pow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13397 13401])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13403 13406]))                          )
                        (reparse-symbol indented_block_body) [13385 13446])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13463 13467])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13469 13472]))                          )
                        (reparse-symbol indented_block_body) [13451 13511])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13528 13532])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13534 13537]))                          )
                        (reparse-symbol indented_block_body) [13516 13576])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13593 13597])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13599 13602]))                          )
                        (reparse-symbol indented_block_body) [13581 13641])
                    ("__rshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13661 13665])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13667 13670]))                          )
                        (reparse-symbol indented_block_body) [13646 13710])
                    ("__lshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13730 13734])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13736 13739]))                          )
                        (reparse-symbol indented_block_body) [13715 13779])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13800 13804])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13806 13809]))                          )
                        (reparse-symbol indented_block_body) [13784 13848])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13870 13874])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13876 13879]))                          )
                        (reparse-symbol indented_block_body) [13853 13919])
                    ("__matmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13939 13943])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13945 13948]))                          )
                        (reparse-symbol indented_block_body) [13924 13987])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14003 14007])
                            ("rhs" variable nil (reparse-symbol function_parameters) [14009 14012]))                          
                        :documentation "Allow both P | Q, and P |'==>'| Q.")
                        (reparse-symbol indented_block_body) [13992 14200])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14251 14255])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14257 14260]))                          )
                        (reparse-symbol indented_block_body) [14238 14299])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14317 14321])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14323 14326]))                          )
                        (reparse-symbol indented_block_body) [14304 14365])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14383 14387])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14389 14392]))                          )
                        (reparse-symbol indented_block_body) [14370 14431])
                    ("__rdiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14449 14453])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14455 14458]))                          )
                        (reparse-symbol indented_block_body) [14436 14497])
                    ("__rpow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14515 14519])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14521 14524]))                          )
                        (reparse-symbol indented_block_body) [14502 14564])
                    ("__rmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14582 14586])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14588 14591]))                          )
                        (reparse-symbol indented_block_body) [14569 14630])
                    ("__rand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14648 14652])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14654 14657]))                          )
                        (reparse-symbol indented_block_body) [14635 14696])
                    ("__rxor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14714 14718])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14720 14723]))                          )
                        (reparse-symbol indented_block_body) [14701 14762])
                    ("__ror__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14779 14783])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14785 14788]))                          )
                        (reparse-symbol indented_block_body) [14767 14827])
                    ("__rrshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14848 14852])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14854 14857]))                          )
                        (reparse-symbol indented_block_body) [14832 14897])
                    ("__rlshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14918 14922])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14924 14927]))                          )
                        (reparse-symbol indented_block_body) [14902 14967])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14989 14993])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14995 14998]))                          )
                        (reparse-symbol indented_block_body) [14972 15037])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15060 15064])
                            ("lhs" variable nil (reparse-symbol function_parameters) [15066 15069]))                          )
                        (reparse-symbol indented_block_body) [15042 15109])
                    ("__rmatmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15130 15134])
                            ("lhs" variable nil (reparse-symbol function_parameters) [15136 15139]))                          )
                        (reparse-symbol indented_block_body) [15114 15178])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15196 15200])
                            ("args" variable nil (reparse-symbol function_parameters) [15202 15207]))                          )
                        (reparse-symbol indented_block_body) [15183 15426])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15466 15470])
                            ("other" variable nil (reparse-symbol function_parameters) [15472 15477]))                          )
                        (reparse-symbol indented_block_body) [15455 15676])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15694 15698]))                          )
                        (reparse-symbol indented_block_body) [15681 15740])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15758 15762]))                          )
                        (reparse-symbol indented_block_body) [15745 16171]))                  
                :type "class")
                nil [12618 16171])
            ("Number" variable nil nil [16285 16315])
            ("Expression" variable nil nil [16316 16343])
            ("Symbol" function
               (:documentation "A Symbol is just an Expr with no args."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16357 16361]))                  )
                nil [16346 16435])
            ("symbols" function
               (:documentation "Return a tuple of Symbols; names is a comma/whitespace delimited str."
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [16449 16454]))                  )
                nil [16437 16612])
            ("subexpressions" function
               (:documentation "Yield the subexpressions of an Expression (including x itself)."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [16633 16634]))                  )
                nil [16614 16821])
            ("arity" function
               (:documentation "The number of sub-expressions in this expression."
                :arguments 
                  ( ("expression" variable nil (reparse-symbol function_parameters) [16833 16843]))                  )
                nil [16823 17032])
            ("PartialExpr" type
               (:documentation "Given 'P |'==>'| Q, first form PartialExpr('==>', P), then combine with Q."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [17251 17278]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17227 17231])
                            ("op" variable nil (reparse-symbol function_parameters) [17233 17235])
                            ("lhs" variable nil (reparse-symbol function_parameters) [17237 17240]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17214 17279])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17295 17299])
                            ("rhs" variable nil (reparse-symbol function_parameters) [17301 17304]))                          )
                        (reparse-symbol indented_block_body) [17284 17351])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17369 17373]))                          )
                        (reparse-symbol indented_block_body) [17356 17441]))                  
                :type "class")
                nil [17106 17441])
            ("expr" function
               (:documentation "Shortcut to create an Expression. x is a str in which:
    - identifiers are automatically defined as Symbols.
    - ==> is treated as an infix |'==>'|, as are <== and <=>.
    If x is already an Expression, it is returned unchanged. Example:
    >>> expr('P & Q ==> Q')
    ((P & Q) ==> Q)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [17452 17453]))                  )
                nil [17443 17886])
            ("infix_ops" variable nil nil [17888 17921])
            ("expr_handle_infix_ops" function
               (:documentation "Given a str, return a new str with ==> replaced by |'==>'|, etc.
    >>> expr_handle_infix_ops('P ==> Q')
    \"P |'==>'| Q\"
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [17950 17951]))                  )
                nil [17924 18179])
            ("defaultkeydict" type
               (:documentation "Like defaultdict, but the default_factory is a function of the key.
    >>> d = defaultkeydict(len); d['four']
    4
    "
                :superclasses ("collections.defaultdict")
                :members 
                  ( ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18380 18384])
                            ("key" variable nil (reparse-symbol function_parameters) [18386 18389]))                          )
                        (reparse-symbol indented_block_body) [18364 18469]))                  
                :type "class")
                nil [18181 18469])
            ("hashabledict" type
               (:documentation "Allows hashing by representing a dictionary as tuple of key:value pairs
       May cause problems as the hash value may change during runtime
    "
                :superclasses ("dict")
                :members 
                  ( ("__tuplify__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18674 18678]))                          )
                        (reparse-symbol indented_block_body) [18658 18724])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18742 18746]))                          )
                        (reparse-symbol indented_block_body) [18729 18789])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18805 18809])
                            ("odict" variable nil (reparse-symbol function_parameters) [18811 18816]))                          )
                        (reparse-symbol indented_block_body) [18794 18922])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18938 18942])
                            ("odict" variable nil (reparse-symbol function_parameters) [18944 18949]))                          )
                        (reparse-symbol indented_block_body) [18927 19055])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19071 19075])
                            ("odict" variable nil (reparse-symbol function_parameters) [19077 19082]))                          )
                        (reparse-symbol indented_block_body) [19060 19189])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19205 19209])
                            ("odict" variable nil (reparse-symbol function_parameters) [19211 19216]))                          )
                        (reparse-symbol indented_block_body) [19194 19323]))                  
                :type "class")
                nil [18471 19323])
            ("Queue" type
               (:documentation "Queue is an abstract class/interface. There are three types:
        Stack(): A Last In First Out Queue.
        FIFOQueue(): A First In First Out Queue.
        PriorityQueue(order, f): Queue in sorted order (default min-first).
    Each type supports the following methods and functions:
        q.append(item)  -- add an item to the queue
        q.extend(items) -- equivalent to: for item in items: q.append(item)
        q.pop()         -- return the top item from the queue
        len(q)          -- number of items in q (also q.__len())
        item in q       -- does q contain item?
    Note that isinstance(Stack(), Queue) is false, because we implement stacks
    as lists.  If Python ever gets interfaces, Queue will be an interface."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("raise" code nil (reparse-symbol indented_block_body) [20357 20382]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20342 20346]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20329 20383])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20399 20403])
                            ("items" variable nil (reparse-symbol function_parameters) [20405 20410]))                          )
                        (reparse-symbol indented_block_body) [20388 20470]))                  
                :type "class")
                nil [19553 20470])
            ("Stack" function (:documentation "Return an empty list, suitable as a Last-In-First-Out Queue.") nil [20472 20570])
            ("FIFOQueue" type
               (:documentation "A First-In-First-Out Queue."
                :superclasses ("Queue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20691 20736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20653 20657])
                            ("maxlen" variable nil (reparse-symbol function_parameters) [20659 20665])
                            ("items" variable nil (reparse-symbol function_parameters) [20672 20677]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20640 20737])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20753 20757])
                            ("item" variable nil (reparse-symbol function_parameters) [20759 20763]))                          )
                        (reparse-symbol indented_block_body) [20742 20938])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20954 20958])
                            ("items" variable nil (reparse-symbol function_parameters) [20960 20965]))                          )
                        (reparse-symbol indented_block_body) [20943 21167])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21180 21184]))                          )
                        (reparse-symbol indented_block_body) [21172 21323])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21340 21344]))                          )
                        (reparse-symbol indented_block_body) [21328 21378])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21400 21404])
                            ("item" variable nil (reparse-symbol function_parameters) [21406 21410]))                          )
                        (reparse-symbol indented_block_body) [21383 21447]))                  
                :type "class")
                nil [20572 21447])
            ("PriorityQueue" type
               (:documentation "A queue in which the minimum (or maximum) element (as determined by f and
    order) is returned first. If order is min, the item with minimum f(x) is
    returned first; if order is max, then it is the item with maximum f(x).
    Also supports dict-like lookup."
                :superclasses ("Queue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21810 21821])
                            ("self" variable nil (reparse-symbol indented_block_body) [21830 21848])
                            ("self" variable nil (reparse-symbol indented_block_body) [21857 21867]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21769 21773])
                            ("order" variable nil (reparse-symbol function_parameters) [21775 21780])
                            ("f" variable nil (reparse-symbol function_parameters) [21786 21787]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21756 21868])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21884 21888])
                            ("item" variable nil (reparse-symbol function_parameters) [21890 21894]))                          )
                        (reparse-symbol indented_block_body) [21873 21949])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21966 21970]))                          )
                        (reparse-symbol indented_block_body) [21954 22000])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22013 22017]))                          )
                        (reparse-symbol indented_block_body) [22005 22135])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22157 22161])
                            ("item" variable nil (reparse-symbol function_parameters) [22163 22167]))                          )
                        (reparse-symbol indented_block_body) [22140 22225])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22246 22250])
                            ("key" variable nil (reparse-symbol function_parameters) [22252 22255]))                          )
                        (reparse-symbol indented_block_body) [22230 22345])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22366 22370])
                            ("key" variable nil (reparse-symbol function_parameters) [22372 22375]))                          )
                        (reparse-symbol indented_block_body) [22350 22487]))                  
                :type "class")
                nil [21449 22487])
            ("Bool" type
               (:documentation "Just like `bool`, except values display as 'T' and 'F' instead of 'True' and 'False'"
                :superclasses ("int")
                :members 
                  ( ("'F'" code nil (reparse-symbol indented_block_body) [22759 22762]))                  
                :type "class")
                nil [22592 22763])
            ("T" variable nil nil [22765 22779])
            ("F" variable nil nil [22780 22795]))          
      :file "utils.py"
      :pointmax 22797
      :fsize 22796
      :lastmodtime '(23189 35928 0 0)
      :unmatched-syntax '((NAME 22708 . 22715) (IF 22746 . 22748) (ELSE 22754 . 22758) (RETURN 15899 . 15905) (IF 15943 . 15945) (ELSE 15951 . 15955) (RETURN 7732 . 7738) (IF 7741 . 7743) (ELSE 7751 . 7755)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("utils" include nil nil [1 20])
            ("itertools" include nil nil [21 37])
            ("naked_subsets" function
               (:documentation "find naked subsets of var

    Note that naked subsets' size could be any number in range [2,3,...9]

    Strength is for the upper bound of naked subsets' size

    "
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [57 60])
                    ("var" variable nil (reparse-symbol function_parameters) [62 65])
                    ("value" variable nil (reparse-symbol function_parameters) [67 72])
                    ("assignment" variable nil (reparse-symbol function_parameters) [74 84])
                    ("removals" variable nil (reparse-symbol function_parameters) [86 94]))                  )
                nil [39 540])
            ("prune_row_naked" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [563 566])
                ("removals" variable nil (reparse-symbol function_parameters) [568 576])
                ("strength" variable nil (reparse-symbol function_parameters) [578 586])
                ("assignment" variable nil (reparse-symbol function_parameters) [588 598]))              ) nil [543 1243])
            ("prune_col_naked" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [1268 1271])
                ("removals" variable nil (reparse-symbol function_parameters) [1273 1281])
                ("strength" variable nil (reparse-symbol function_parameters) [1283 1291])
                ("assignment" variable nil (reparse-symbol function_parameters) [1293 1303]))              ) nil [1248 1948])
            ("prune_block_naked" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [1973 1976])
                ("removals" variable nil (reparse-symbol function_parameters) [1978 1986])
                ("strength" variable nil (reparse-symbol function_parameters) [1988 1996])
                ("assignment" variable nil (reparse-symbol function_parameters) [1998 2008]))              ) nil [1951 2665])
            ("get_combination_vars" function (:arguments 
              ( ("vlist" variable nil (reparse-symbol function_parameters) [2711 2716])
                ("size" variable nil (reparse-symbol function_parameters) [2718 2722]))              ) nil [2686 2769])
            ("delete_asgned" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [2790 2793])
                ("vlist" variable nil (reparse-symbol function_parameters) [2795 2800])
                ("assignment" variable nil (reparse-symbol function_parameters) [2802 2812]))              ) nil [2772 2912])
            ("get_row" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [2927 2930])
                ("row" variable nil (reparse-symbol function_parameters) [2932 2935]))              ) nil [2915 2982])
            ("get_col" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [2997 3000])
                ("col" variable nil (reparse-symbol function_parameters) [3002 3005]))              ) nil [2985 3052])
            ("get_block" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [3069 3072])
                ("block" variable nil (reparse-symbol function_parameters) [3074 3079]))              ) nil [3055 3217])
            ("get_domain_set" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [3239 3242])
                ("varlist" variable nil (reparse-symbol function_parameters) [3244 3251]))              ) nil [3220 3372])
            ("prune_domain" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [3392 3395])
                ("domains" variable nil (reparse-symbol function_parameters) [3397 3404])
                ("vlist" variable nil (reparse-symbol function_parameters) [3406 3411])
                ("removals" variable nil (reparse-symbol function_parameters) [3413 3421]))              ) nil [3375 3563])
            ("check_naked" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [3584 3587])
                ("varlist" variable nil (reparse-symbol function_parameters) [3589 3596]))              ) nil [3568 3803])
            ("is_peer" function
               (:documentation "is v1 v2 of same row or column or block

    return -1: not peers  0:same  1: row   2: column  3: block  4: row and block  5: col and block

    "
                :arguments 
                  ( ("v1" variable nil (reparse-symbol function_parameters) [3820 3822])
                    ("v2" variable nil (reparse-symbol function_parameters) [3824 3826]))                  )
                nil [3808 4619])
            ("get_peers" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [4644 4647])
                ("var" variable nil (reparse-symbol function_parameters) [4649 4652])
                ("peertype" variable nil (reparse-symbol function_parameters) [4654 4662]))              ) nil [4630 5607])
            ("get_row_peers" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [5628 5631])
                ("var" variable nil (reparse-symbol function_parameters) [5633 5636]))              ) nil [5610 5903])
            ("get_col_peers" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [5924 5927])
                ("var" variable nil (reparse-symbol function_parameters) [5929 5932]))              ) nil [5906 6147])
            ("get_block_peers" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [6170 6173])
                ("var" variable nil (reparse-symbol function_parameters) [6175 6178]))              ) nil [6150 6619]))          
      :file "naked_subsets.py"
      :pointmax 6619
      :fsize 6618
      :lastmodtime '(23191 25791 0 0)
      :unmatched-syntax nil))
  :file "!Users!jihaoyu!Downloads!sudoku!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
