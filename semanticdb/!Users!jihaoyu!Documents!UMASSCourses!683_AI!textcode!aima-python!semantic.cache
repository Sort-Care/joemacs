;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Provides some utilities widely used by other modules\"\"\"" code nil nil [1 59])
            ("bisect" include nil nil [61 74])
            ("collections" include nil nil [75 93])
            ("collections.abc" include nil nil [94 116])
            ("operator" include nil nil [117 132])
            ("os.path" include nil nil [133 147])
            ("random" include nil nil [148 161])
            ("math" include nil nil [162 173])
            ("functools" include nil nil [174 190])
            ("itertools" include nil nil [191 232])
            ("sequence" function
               (:documentation "Coerce iterable to sequence, if it is not already one."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [370 378]))                  )
                nil [357 551])
            ("removeall" function
               (:documentation "Return a copy of seq (or string) with all occurences of item removed."
                :arguments 
                  ( ("item" variable nil (reparse-symbol function_parameters) [567 571])
                    ("seq" variable nil (reparse-symbol function_parameters) [573 576]))                  )
                nil [553 780])
            ("unique" function
               (:documentation "Remove duplicate elements from seq. Assumes hashable elements."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [793 796]))                  )
                nil [782 924])
            ("count" function
               (:documentation "Count the number of items in sequence that are interpreted as true."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [936 939]))                  )
                nil [926 1057])
            ("product" function
               (:documentation "Return the product of the numbers, e.g. product([2, 3, 10]) == 60"
                :arguments 
                  ( ("numbers" variable nil (reparse-symbol function_parameters) [1071 1078]))                  )
                nil [1059 1232])
            ("first" function
               (:documentation "Return the first element of an iterable or the next element of a generator; or default."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [1244 1252])
                    ("default" variable nil (reparse-symbol function_parameters) [1254 1261]))                  )
                nil [1234 1510])
            ("is_in" function
               (:documentation "Similar to (elt in seq), but compares with 'is', not '=='."
                :arguments 
                  ( ("elt" variable nil (reparse-symbol function_parameters) [1522 1525])
                    ("seq" variable nil (reparse-symbol function_parameters) [1527 1530]))                  )
                nil [1512 1640])
            ("mode" function
               (:documentation "Return the most common data item. If there are ties, return any one of them."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [1651 1655]))                  )
                nil [1642 1824])
            ("powerset" function
               (:documentation "powerset([1,2,3]) --> (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [1839 1847]))                  )
                nil [1826 2032])
            ("identity" variable nil nil [2137 2159])
            ("argmin" variable nil nil [2161 2173])
            ("argmax" variable nil nil [2174 2186])
            ("argmin_random_tie" function
               (:documentation "Return a minimum element of seq; break ties at random."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [2211 2214])
                    ("key" variable nil (reparse-symbol function_parameters) [2216 2219]))                  )
                nil [2189 2338])
            ("argmax_random_tie" function
               (:documentation "Return an element with highest fn(seq[i]) score; break ties at random."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [2362 2365])
                    ("key" variable nil (reparse-symbol function_parameters) [2367 2370]))                  )
                nil [2340 2505])
            ("shuffled" function
               (:documentation "Randomly shuffle a copy of iterable."
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [2520 2528]))                  )
                nil [2507 2648])
            ("histogram" function
               (:documentation "Return a list of (value, count) pairs, summarizing the input values.
    Sorted by increasing value, or if mode=1, by decreasing count.
    If bin_function is given, map it over values first."
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [2788 2794])
                    ("mode" variable nil (reparse-symbol function_parameters) [2796 2800])
                    ("bin_function" variable nil (reparse-symbol function_parameters) [2804 2816]))                  )
                nil [2774 3335])
            ("dotproduct" function
               (:documentation "Return the sum of the element-wise product of vectors X and Y."
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [3352 3353])
                    ("Y" variable nil (reparse-symbol function_parameters) [3355 3356]))                  )
                nil [3337 3476])
            ("element_wise_product" function
               (:documentation "Return vector as an element-wise product of vectors X and Y"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [3503 3504])
                    ("Y" variable nil (reparse-symbol function_parameters) [3506 3507]))                  )
                nil [3478 3649])
            ("matrix_multiplication" function
               (:documentation "Return a matrix as a matrix-multiplication of X_M and arbitary number of matrices *Y_M"
                :arguments 
                  ( ("X_M" variable nil (reparse-symbol function_parameters) [3677 3680])
                    ("Y_M" variable nil (reparse-symbol function_parameters) [3682 3686]))                  )
                nil [3651 4568])
            ("vector_to_diagonal" function
               (:documentation "Converts a vector to a diagonal matrix with vector elements
    as the diagonal elements of the matrix"
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [4593 4594]))                  )
                nil [4570 4865])
            ("vector_add" function
               (:documentation "Component-wise addition of two vectors."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [4882 4883])
                    ("b" variable nil (reparse-symbol function_parameters) [4885 4886]))                  )
                nil [4867 4981])
            ("scalar_vector_product" function
               (:documentation "Return vector as a product of a scalar and a vector"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5009 5010])
                    ("Y" variable nil (reparse-symbol function_parameters) [5012 5013]))                  )
                nil [4983 5108])
            ("scalar_matrix_product" function
               (:documentation "Return matrix as a product of a scalar and a matrix"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5136 5137])
                    ("Y" variable nil (reparse-symbol function_parameters) [5139 5140]))                  )
                nil [5110 5257])
            ("inverse_matrix" function
               (:documentation "Inverse a given square matrix of size 2x2"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [5278 5279]))                  )
                nil [5259 5560])
            ("probability" function
               (:documentation "Return true with probability p."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [5578 5579]))                  )
                nil [5562 5664])
            ("weighted_sample_with_replacement" function
               (:documentation "Pick n samples from seq at random, with replacement, with the
    probability of each element in proportion to its corresponding
    weight."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [5703 5704])
                    ("seq" variable nil (reparse-symbol function_parameters) [5706 5709])
                    ("weights" variable nil (reparse-symbol function_parameters) [5711 5718]))                  )
                nil [5666 5957])
            ("weighted_sampler" function
               (:documentation "Return a random-sample function that picks from seq weighted by weights."
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [5980 5983])
                    ("weights" variable nil (reparse-symbol function_parameters) [5985 5992]))                  )
                nil [5959 6249])
            ("rounder" function
               (:documentation "Round a single number, or sequence of numbers, to d decimal places."
                :arguments 
                  ( ("numbers" variable nil (reparse-symbol function_parameters) [6263 6270])
                    ("d" variable nil (reparse-symbol function_parameters) [6272 6273]))                  )
                nil [6251 6572])
            ("num_or_str" function
               (:documentation "The argument is a string; convert to a number if
       possible, or strip it."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6589 6590]))                  )
                nil [6574 6838])
            ("normalize" function
               (:documentation "Multiply each number by a constant such that the sum is 1.0"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [6854 6858]))                  )
                nil [6840 7226])
            ("norm" function
               (:documentation "Return the n-norm of vector X"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [7237 7238])
                    ("n" variable nil (reparse-symbol function_parameters) [7240 7241]))                  )
                nil [7228 7327])
            ("clip" function
               (:documentation "Return x clipped to the range [lowest..highest]."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7338 7339])
                    ("lowest" variable nil (reparse-symbol function_parameters) [7341 7347])
                    ("highest" variable nil (reparse-symbol function_parameters) [7349 7356]))                  )
                nil [7329 7458])
            ("sigmoid_derivative" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7483 7488]))              ) nil [7460 7522])
            ("sigmoid" function
               (:documentation "Return activation value of x with sigmoid function"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7536 7537]))                  )
                nil [7524 7633])
            ("step" function
               (:documentation "Return activation value of x with sign function"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7644 7645]))                  )
                nil [7635 7736])
            ("gaussian" function
               (:documentation "Given the mean and standard deviation of a distribution, it returns the probability of x."
                :arguments 
                  ( ("mean" variable nil (reparse-symbol function_parameters) [7751 7755])
                    ("st_dev" variable nil (reparse-symbol function_parameters) [7757 7763])
                    ("x" variable nil (reparse-symbol function_parameters) [7765 7766]))                  )
                nil [7738 7953])
            ("try" code nil nil [7955 8267])
            ("weighted_choice" function
               (:documentation "A weighted version of random.choice"
                :arguments 
                  ( ("choices" variable nil (reparse-symbol function_parameters) [8289 8296]))                  )
                nil [8269 8598])
            ("orientations" variable nil nil [8700 8776])
            ("turns" variable nil nil [8777 8807])
            ("turn_heading" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [8827 8834])
                ("inc" variable nil (reparse-symbol function_parameters) [8836 8839])
                ("headings" variable nil (reparse-symbol function_parameters) [8841 8849]))              ) nil [8810 8934])
            ("turn_right" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [8951 8958]))              ) nil [8936 9001])
            ("turn_left" function (:arguments 
              ( ("heading" variable nil (reparse-symbol function_parameters) [9017 9024]))              ) nil [9003 9066])
            ("distance" function
               (:documentation "The distance between two (x, y) points."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [9081 9082])
                    ("b" variable nil (reparse-symbol function_parameters) [9084 9085]))                  )
                nil [9068 9212])
            ("distance_squared" function
               (:documentation "The square of the distance between two (x, y) points."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [9235 9236])
                    ("b" variable nil (reparse-symbol function_parameters) [9238 9239]))                  )
                nil [9214 9375])
            ("vector_clip" function
               (:documentation "Return vector, except if any element is less than the corresponding
    value of lowest or more than the corresponding value of highest, clip to
    those values."
                :arguments 
                  ( ("vector" variable nil (reparse-symbol function_parameters) [9393 9399])
                    ("lowest" variable nil (reparse-symbol function_parameters) [9401 9407])
                    ("highest" variable nil (reparse-symbol function_parameters) [9409 9416]))                  )
                nil [9377 9652])
            ("memoize" function
               (:documentation "Memoize fn: make it remember the computed value for any argument list.
    If slot is specified, store result in that slot of first argument.
    If slot is false, use lru_cache for caching the values."
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [9766 9768])
                    ("slot" variable nil (reparse-symbol function_parameters) [9770 9774])
                    ("maxsize" variable nil (reparse-symbol function_parameters) [9781 9788]))                  )
                nil [9754 10396])
            ("name" function
               (:documentation "Try to find some reasonable name for the object."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [10407 10410]))                  )
                nil [10398 10632])
            ("isnumber" function
               (:documentation "Is x a number?"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [10647 10648]))                  )
                nil [10634 10709])
            ("issequence" function
               (:documentation "Is x a sequence?"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [10726 10727]))                  )
                nil [10711 10808])
            ("print_table" function
               (:documentation "Print a list of lists as a table, so that columns line up nicely.
    header, if specified, will be printed as the first row.
    numfmt is the format for all numbers; you might want e.g. '{:.2f}'.
    (If you want different formats in different columns,
    don't use print_table.) sep is the separator between columns."
                :arguments 
                  ( ("table" variable nil (reparse-symbol function_parameters) [10826 10831])
                    ("header" variable nil (reparse-symbol function_parameters) [10833 10839])
                    ("sep" variable nil (reparse-symbol function_parameters) [10846 10849])
                    ("numfmt" variable nil (reparse-symbol function_parameters) [10857 10863]))                  )
                nil [10810 11676])
            ("open_data" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [11692 11696])
                ("mode" variable nil (reparse-symbol function_parameters) [11698 11702]))              ) nil [11678 11841])
            ("failure_test" function
               (:documentation "Grades the given algorithm based on how many tests it passes.
    Most algorithms have arbitary output on correct execution, which is difficult
    to check for correctness. On the other hand, a lot of algorithms output something
    particular on fail (for example, False, or None).
    tests is a list with each element in the form: (values, failure_output)."
                :arguments 
                  ( ("algorithm" variable nil (reparse-symbol function_parameters) [11860 11869])
                    ("tests" variable nil (reparse-symbol function_parameters) [11871 11876]))                  )
                nil [11843 12340])
            ("Expr" type
               (:documentation "A mathematical expression with an operator and 0 or more arguments.
    op is a str like '+' or 'sin'; args are Expressions.
    Expr('x') or Symbol('x') creates a symbol (a nullary Expr).
    Expr('-', x) creates a unary; Expr('+', x, 1) creates a binary."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12927 12944])
                            ("self" variable nil (reparse-symbol indented_block_body) [12953 12969]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12901 12905])
                            ("op" variable nil (reparse-symbol function_parameters) [12907 12909])
                            ("args" variable nil (reparse-symbol function_parameters) [12911 12916]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12888 12970])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13012 13016]))                          )
                        (reparse-symbol indented_block_body) [13000 13050])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13067 13071]))                          )
                        (reparse-symbol indented_block_body) [13055 13105])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13125 13129]))                          )
                        (reparse-symbol indented_block_body) [13110 13163])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13180 13184])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13186 13189]))                          )
                        (reparse-symbol indented_block_body) [13168 13228])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13245 13249])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13251 13254]))                          )
                        (reparse-symbol indented_block_body) [13233 13293])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13310 13314])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13316 13319]))                          )
                        (reparse-symbol indented_block_body) [13298 13358])
                    ("__pow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13375 13379])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13381 13384]))                          )
                        (reparse-symbol indented_block_body) [13363 13424])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13441 13445])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13447 13450]))                          )
                        (reparse-symbol indented_block_body) [13429 13489])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13506 13510])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13512 13515]))                          )
                        (reparse-symbol indented_block_body) [13494 13554])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13571 13575])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13577 13580]))                          )
                        (reparse-symbol indented_block_body) [13559 13619])
                    ("__rshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13639 13643])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13645 13648]))                          )
                        (reparse-symbol indented_block_body) [13624 13688])
                    ("__lshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13708 13712])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13714 13717]))                          )
                        (reparse-symbol indented_block_body) [13693 13757])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13778 13782])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13784 13787]))                          )
                        (reparse-symbol indented_block_body) [13762 13826])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13848 13852])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13854 13857]))                          )
                        (reparse-symbol indented_block_body) [13831 13897])
                    ("__matmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13917 13921])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13923 13926]))                          )
                        (reparse-symbol indented_block_body) [13902 13965])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13981 13985])
                            ("rhs" variable nil (reparse-symbol function_parameters) [13987 13990]))                          
                        :documentation "Allow both P | Q, and P |'==>'| Q.")
                        (reparse-symbol indented_block_body) [13970 14178])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14229 14233])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14235 14238]))                          )
                        (reparse-symbol indented_block_body) [14216 14277])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14295 14299])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14301 14304]))                          )
                        (reparse-symbol indented_block_body) [14282 14343])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14361 14365])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14367 14370]))                          )
                        (reparse-symbol indented_block_body) [14348 14409])
                    ("__rdiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14427 14431])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14433 14436]))                          )
                        (reparse-symbol indented_block_body) [14414 14475])
                    ("__rpow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14493 14497])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14499 14502]))                          )
                        (reparse-symbol indented_block_body) [14480 14542])
                    ("__rmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14560 14564])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14566 14569]))                          )
                        (reparse-symbol indented_block_body) [14547 14608])
                    ("__rand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14626 14630])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14632 14635]))                          )
                        (reparse-symbol indented_block_body) [14613 14674])
                    ("__rxor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14692 14696])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14698 14701]))                          )
                        (reparse-symbol indented_block_body) [14679 14740])
                    ("__ror__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14757 14761])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14763 14766]))                          )
                        (reparse-symbol indented_block_body) [14745 14805])
                    ("__rrshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14826 14830])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14832 14835]))                          )
                        (reparse-symbol indented_block_body) [14810 14875])
                    ("__rlshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14896 14900])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14902 14905]))                          )
                        (reparse-symbol indented_block_body) [14880 14945])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14967 14971])
                            ("lhs" variable nil (reparse-symbol function_parameters) [14973 14976]))                          )
                        (reparse-symbol indented_block_body) [14950 15015])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15038 15042])
                            ("lhs" variable nil (reparse-symbol function_parameters) [15044 15047]))                          )
                        (reparse-symbol indented_block_body) [15020 15087])
                    ("__rmatmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15108 15112])
                            ("lhs" variable nil (reparse-symbol function_parameters) [15114 15117]))                          )
                        (reparse-symbol indented_block_body) [15092 15156])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15174 15178])
                            ("args" variable nil (reparse-symbol function_parameters) [15180 15185]))                          )
                        (reparse-symbol indented_block_body) [15161 15404])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15444 15448])
                            ("other" variable nil (reparse-symbol function_parameters) [15450 15455]))                          )
                        (reparse-symbol indented_block_body) [15433 15654])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15672 15676]))                          )
                        (reparse-symbol indented_block_body) [15659 15718])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15736 15740]))                          )
                        (reparse-symbol indented_block_body) [15723 16149]))                  
                :type "class")
                nil [12596 16149])
            ("Number" variable nil nil [16263 16293])
            ("Expression" variable nil nil [16294 16321])
            ("Symbol" function
               (:documentation "A Symbol is just an Expr with no args."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16335 16339]))                  )
                nil [16324 16413])
            ("symbols" function
               (:documentation "Return a tuple of Symbols; names is a comma/whitespace delimited str."
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [16427 16432]))                  )
                nil [16415 16590])
            ("subexpressions" function
               (:documentation "Yield the subexpressions of an Expression (including x itself)."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [16611 16612]))                  )
                nil [16592 16799])
            ("arity" function
               (:documentation "The number of sub-expressions in this expression."
                :arguments 
                  ( ("expression" variable nil (reparse-symbol function_parameters) [16811 16821]))                  )
                nil [16801 17010])
            ("PartialExpr" type
               (:documentation "Given 'P |'==>'| Q, first form PartialExpr('==>', P), then combine with Q."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [17229 17256]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17205 17209])
                            ("op" variable nil (reparse-symbol function_parameters) [17211 17213])
                            ("lhs" variable nil (reparse-symbol function_parameters) [17215 17218]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17192 17257])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17273 17277])
                            ("rhs" variable nil (reparse-symbol function_parameters) [17279 17282]))                          )
                        (reparse-symbol indented_block_body) [17262 17329])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17347 17351]))                          )
                        (reparse-symbol indented_block_body) [17334 17419]))                  
                :type "class")
                nil [17084 17419])
            ("expr" function
               (:documentation "Shortcut to create an Expression. x is a str in which:
    - identifiers are automatically defined as Symbols.
    - ==> is treated as an infix |'==>'|, as are <== and <=>.
    If x is already an Expression, it is returned unchanged. Example:
    >>> expr('P & Q ==> Q')
    ((P & Q) ==> Q)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [17430 17431]))                  )
                nil [17421 17864])
            ("infix_ops" variable nil nil [17866 17899])
            ("expr_handle_infix_ops" function
               (:documentation "Given a str, return a new str with ==> replaced by |'==>'|, etc.
    >>> expr_handle_infix_ops('P ==> Q')
    \"P |'==>'| Q\"
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [17928 17929]))                  )
                nil [17902 18157])
            ("defaultkeydict" type
               (:documentation "Like defaultdict, but the default_factory is a function of the key.
    >>> d = defaultkeydict(len); d['four']
    4
    "
                :superclasses ("collections.defaultdict")
                :members 
                  ( ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18358 18362])
                            ("key" variable nil (reparse-symbol function_parameters) [18364 18367]))                          )
                        (reparse-symbol indented_block_body) [18342 18447]))                  
                :type "class")
                nil [18159 18447])
            ("hashabledict" type
               (:documentation "Allows hashing by representing a dictionary as tuple of key:value pairs
       May cause problems as the hash value may change during runtime
    "
                :superclasses ("dict")
                :members 
                  ( ("__tuplify__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18652 18656]))                          )
                        (reparse-symbol indented_block_body) [18636 18702])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18720 18724]))                          )
                        (reparse-symbol indented_block_body) [18707 18767])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18783 18787])
                            ("odict" variable nil (reparse-symbol function_parameters) [18789 18794]))                          )
                        (reparse-symbol indented_block_body) [18772 18900])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18916 18920])
                            ("odict" variable nil (reparse-symbol function_parameters) [18922 18927]))                          )
                        (reparse-symbol indented_block_body) [18905 19033])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19049 19053])
                            ("odict" variable nil (reparse-symbol function_parameters) [19055 19060]))                          )
                        (reparse-symbol indented_block_body) [19038 19167])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19183 19187])
                            ("odict" variable nil (reparse-symbol function_parameters) [19189 19194]))                          )
                        (reparse-symbol indented_block_body) [19172 19301]))                  
                :type "class")
                nil [18449 19301])
            ("Queue" type
               (:documentation "Queue is an abstract class/interface. There are three types:
        Stack(): A Last In First Out Queue.
        FIFOQueue(): A First In First Out Queue.
        PriorityQueue(order, f): Queue in sorted order (default min-first).
    Each type supports the following methods and functions:
        q.append(item)  -- add an item to the queue
        q.extend(items) -- equivalent to: for item in items: q.append(item)
        q.pop()         -- return the top item from the queue
        len(q)          -- number of items in q (also q.__len())
        item in q       -- does q contain item?
    Note that isinstance(Stack(), Queue) is false, because we implement stacks
    as lists.  If Python ever gets interfaces, Queue will be an interface."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("raise" code nil (reparse-symbol indented_block_body) [20335 20360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20320 20324]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20307 20361])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20377 20381])
                            ("items" variable nil (reparse-symbol function_parameters) [20383 20388]))                          )
                        (reparse-symbol indented_block_body) [20366 20448]))                  
                :type "class")
                nil [19531 20448])
            ("Stack" function (:documentation "Return an empty list, suitable as a Last-In-First-Out Queue.") nil [20450 20548])
            ("FIFOQueue" type
               (:documentation "A First-In-First-Out Queue."
                :superclasses ("Queue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20669 20714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20631 20635])
                            ("maxlen" variable nil (reparse-symbol function_parameters) [20637 20643])
                            ("items" variable nil (reparse-symbol function_parameters) [20650 20655]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20618 20715])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20731 20735])
                            ("item" variable nil (reparse-symbol function_parameters) [20737 20741]))                          )
                        (reparse-symbol indented_block_body) [20720 20916])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20932 20936])
                            ("items" variable nil (reparse-symbol function_parameters) [20938 20943]))                          )
                        (reparse-symbol indented_block_body) [20921 21145])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21158 21162]))                          )
                        (reparse-symbol indented_block_body) [21150 21301])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21318 21322]))                          )
                        (reparse-symbol indented_block_body) [21306 21356])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21378 21382])
                            ("item" variable nil (reparse-symbol function_parameters) [21384 21388]))                          )
                        (reparse-symbol indented_block_body) [21361 21425]))                  
                :type "class")
                nil [20550 21425])
            ("PriorityQueue" type
               (:documentation "A queue in which the minimum (or maximum) element (as determined by f and
    order) is returned first. If order is min, the item with minimum f(x) is
    returned first; if order is max, then it is the item with maximum f(x).
    Also supports dict-like lookup."
                :superclasses ("Queue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21788 21799])
                            ("self" variable nil (reparse-symbol indented_block_body) [21808 21826])
                            ("self" variable nil (reparse-symbol indented_block_body) [21835 21845]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21747 21751])
                            ("order" variable nil (reparse-symbol function_parameters) [21753 21758])
                            ("f" variable nil (reparse-symbol function_parameters) [21764 21765]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21734 21846])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21862 21866])
                            ("item" variable nil (reparse-symbol function_parameters) [21868 21872]))                          )
                        (reparse-symbol indented_block_body) [21851 21927])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21944 21948]))                          )
                        (reparse-symbol indented_block_body) [21932 21978])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21991 21995]))                          )
                        (reparse-symbol indented_block_body) [21983 22113])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22135 22139])
                            ("item" variable nil (reparse-symbol function_parameters) [22141 22145]))                          )
                        (reparse-symbol indented_block_body) [22118 22203])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22224 22228])
                            ("key" variable nil (reparse-symbol function_parameters) [22230 22233]))                          )
                        (reparse-symbol indented_block_body) [22208 22323])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22344 22348])
                            ("key" variable nil (reparse-symbol function_parameters) [22350 22353]))                          )
                        (reparse-symbol indented_block_body) [22328 22465]))                  
                :type "class")
                nil [21427 22465])
            ("Bool" type
               (:documentation "Just like `bool`, except values display as 'T' and 'F' instead of 'True' and 'False'"
                :superclasses ("int")
                :members 
                  ( ("'F'" code nil (reparse-symbol indented_block_body) [22737 22740]))                  
                :type "class")
                nil [22570 22741])
            ("T" variable nil nil [22743 22757])
            ("F" variable nil nil [22758 22773]))          
      :file "utils.py"
      :pointmax 22774
      :fsize 22773
      :lastmodtime '(23159 25875 628625 997000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Search (Chapters 3-4)

The way to use this code is to subclass Problem to create a class of problems,
then create problem instances and solve them with calls to the various search
functions.\"\"\"" code nil nil [1 197])
            ("" code nil nil [217 398])
            ("collections" include nil nil [400 435])
            ("math" include nil nil [436 447])
            ("random" include nil nil [448 461])
            ("sys" include nil nil [462 472])
            ("bisect" include nil nil [473 486])
            ("operator" include nil nil [487 518])
            ("infinity" variable nil nil [521 544])
            ("Problem" type
               (:documentation "The abstract class for a formal problem. You should subclass
    this and implement the methods actions and result, and possibly
    __init__, goal_test, and path_cost. Then you will create instances
    of your subclass and solve them with the various search functions."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"The constructor specifies the initial state, and possibly a goal
        state, if there is a unique goal. Your subclass's constructor can add
        other arguments.\"\"\"" code nil (reparse-symbol indented_block_body) [987 1160])
                            ("self" variable nil (reparse-symbol indented_block_body) [1169 1191])
                            ("self" variable nil (reparse-symbol indented_block_body) [1200 1216]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [952 956])
                            ("initial" variable nil (reparse-symbol function_parameters) [958 965])
                            ("goal" variable nil (reparse-symbol function_parameters) [967 971]))                          
                        :documentation "The constructor specifies the initial state, and possibly a goal
        state, if there is a unique goal. Your subclass's constructor can add
        other arguments."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [939 1217])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1234 1238])
                            ("state" variable nil (reparse-symbol function_parameters) [1240 1245]))                          
                        :documentation "Return the actions that can be executed in the given
        state. The result would typically be a list, but if there are
        many actions, consider yielding them one at a time in an
        iterator, rather than building them all at once.")
                        (reparse-symbol indented_block_body) [1222 1541])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1557 1561])
                            ("state" variable nil (reparse-symbol function_parameters) [1563 1568])
                            ("action" variable nil (reparse-symbol function_parameters) [1570 1576]))                          
                        :documentation "Return the state that results from executing the given
        action in the given state. The action must be one of
        self.actions(state).")
                        (reparse-symbol indented_block_body) [1546 1772])
                    ("goal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("state" variable nil (reparse-symbol function_parameters) [1797 1802]))                          
                        :documentation "Return True if the state is a goal. The default method compares the
        state to self.goal or checks for state in self.goal if it is a
        list, as specified in the constructor. Override this method if
        checking against a single self.goal is not enough.")
                        (reparse-symbol indented_block_body) [1777 2223])
                    ("path_cost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2242 2246])
                            ("c" variable nil (reparse-symbol function_parameters) [2248 2249])
                            ("state1" variable nil (reparse-symbol function_parameters) [2251 2257])
                            ("action" variable nil (reparse-symbol function_parameters) [2259 2265])
                            ("state2" variable nil (reparse-symbol function_parameters) [2267 2273]))                          
                        :documentation "Return the cost of a solution path that arrives at state2 from
        state1 via action, assuming cost c to get up to state1. If the problem
        is such that the path doesn't matter, this function will only look at
        state2.  If the path does matter, it will consider c and maybe state1
        and action. The default method costs 1 for every step in the path.")
                        (reparse-symbol indented_block_body) [2228 2684])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2699 2703])
                            ("state" variable nil (reparse-symbol function_parameters) [2705 2710]))                          
                        :documentation "For optimization problems, each state has a value.  Hill-climbing
        and related algorithms try to maximize this value.")
                        (reparse-symbol indented_block_body) [2689 2886]))                  
                :type "class")
                nil [629 2886])
            ("Node" type
               (:documentation "A node in a search tree. Contains a pointer to the parent (the node
    that this is a successor of) and to the actual state for this node. Note
    that if a state is arrived at by two paths, then there are two nodes with
    the same state.  Also includes the action that got us to this state, and
    the total path_cost (also known as g) to reach the node.  Other functions
    may add an f and h value; see best_first_graph_search and astar_search for
    an explanation of how the f and h values are handled. You will not need to
    subclass this class."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a search tree Node, derived from a parent by an action.\"\"\"" code nil (reparse-symbol indented_block_body) [3632 3700])
                            ("self" variable nil (reparse-symbol indented_block_body) [3709 3727])
                            ("self" variable nil (reparse-symbol indented_block_body) [3736 3756])
                            ("self" variable nil (reparse-symbol indented_block_body) [3765 3785])
                            ("self" variable nil (reparse-symbol indented_block_body) [3794 3820])
                            ("self" variable nil (reparse-symbol indented_block_body) [3829 3843])
                            ("if" code nil (reparse-symbol indented_block_body) [3852 3905]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3571 3575])
                            ("state" variable nil (reparse-symbol function_parameters) [3577 3582])
                            ("parent" variable nil (reparse-symbol function_parameters) [3584 3590])
                            ("action" variable nil (reparse-symbol function_parameters) [3597 3603])
                            ("path_cost" variable nil (reparse-symbol function_parameters) [3610 3619]))                          
                        :documentation "Create a search tree Node, derived from a parent by an action."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3558 3905])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3923 3927]))                          )
                        (reparse-symbol indented_block_body) [3910 3976])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3992 3996])
                            ("node" variable nil (reparse-symbol function_parameters) [3998 4002]))                          )
                        (reparse-symbol indented_block_body) [3981 4044])
                    ("expand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("problem" variable nil (reparse-symbol function_parameters) [4066 4073]))                          
                        :documentation "List the nodes reachable in one step from this node.")
                        (reparse-symbol indented_block_body) [4049 4251])
                    ("child_node" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4271 4275])
                            ("problem" variable nil (reparse-symbol function_parameters) [4277 4284])
                            ("action" variable nil (reparse-symbol function_parameters) [4286 4292]))                          
                        :documentation "[Figure 3.10]")
                        (reparse-symbol indented_block_body) [4256 4532])
                    ("solution" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4550 4554]))                          
                        :documentation "Return the sequence of actions to go from the root to this node.")
                        (reparse-symbol indented_block_body) [4537 4693])
                    ("path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4707 4711]))                          
                        :documentation "Return a list of nodes forming the path from the root to this node.")
                        (reparse-symbol indented_block_body) [4698 4958])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5206 5210])
                            ("other" variable nil (reparse-symbol function_parameters) [5212 5217]))                          )
                        (reparse-symbol indented_block_body) [5195 5289])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5307 5311]))                          )
                        (reparse-symbol indented_block_body) [5294 5346]))                  
                :type "class")
                nil [2969 5346])
            ("SimpleProblemSolvingAgentProgram" type
               (:documentation "Abstract framework for a problem-solving agent. [Figure 3.1]"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"State is an sbstract representation of the state
        of the world, and seq is the list of actions required
        to get to a particular state from the initial state(root).\"\"\"" code nil (reparse-symbol indented_block_body) [5595 5778])
                            ("self" variable nil (reparse-symbol indented_block_body) [5787 5813])
                            ("self" variable nil (reparse-symbol indented_block_body) [5822 5835]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5560 5564])
                            ("initial_state" variable nil (reparse-symbol function_parameters) [5566 5579]))                          
                        :documentation "State is an sbstract representation of the state
        of the world, and seq is the list of actions required
        to get to a particular state from the initial state(root)."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5547 5836])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5854 5858])
                            ("percept" variable nil (reparse-symbol function_parameters) [5860 5867]))                          
                        :documentation "[Figure 3.1] Formulate a goal and problem, then
        search for a sequence of actions to solve it.")
                        (reparse-symbol indented_block_body) [5841 6317])
                    ("update_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6339 6343])
                            ("percept" variable nil (reparse-symbol function_parameters) [6345 6352]))                          )
                        (reparse-symbol indented_block_body) [6322 6389])
                    ("formulate_goal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6413 6417])
                            ("state" variable nil (reparse-symbol function_parameters) [6419 6424]))                          )
                        (reparse-symbol indented_block_body) [6394 6461])
                    ("formulate_problem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6488 6492])
                            ("state" variable nil (reparse-symbol function_parameters) [6494 6499])
                            ("goal" variable nil (reparse-symbol function_parameters) [6501 6505]))                          )
                        (reparse-symbol indented_block_body) [6466 6542])
                    ("search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6558 6562])
                            ("problem" variable nil (reparse-symbol function_parameters) [6564 6571]))                          )
                        (reparse-symbol indented_block_body) [6547 6608]))                  
                :type "class")
                nil [5430 6608])
            ("tree_search" function
               (:documentation "Search through the successors of a problem to find a goal.
    The argument frontier should be an empty queue.
    Don't worry about repeated paths to a state. [Figure 3.7]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [6739 6746])
                    ("frontier" variable nil (reparse-symbol function_parameters) [6748 6756]))                  )
                nil [6723 7163])
            ("graph_search" function
               (:documentation "Search through the successors of a problem to find a goal.
    The argument frontier should be an empty queue.
    If two paths reach a state, only use the first one. [Figure 3.7]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [7182 7189])
                    ("frontier" variable nil (reparse-symbol function_parameters) [7191 7199]))                  )
                nil [7165 7791])
            ("breadth_first_tree_search" function
               (:documentation "Search the shallowest nodes in the search tree first."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [7823 7830]))                  )
                nil [7793 7942])
            ("depth_first_tree_search" function
               (:documentation "Search the deepest nodes in the search tree first."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [7972 7979]))                  )
                nil [7944 8084])
            ("depth_first_graph_search" function
               (:documentation "Search the deepest nodes in the search tree first."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [8115 8122]))                  )
                nil [8086 8228])
            ("breadth_first_search" function
               (:documentation "[Figure 3.11]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [8255 8262]))                  )
                nil [8230 8789])
            ("best_first_graph_search" function
               (:documentation "Search the nodes with the lowest f scores first.
    You specify the function f(node) that you want to minimize; for example,
    if f is a heuristic estimate to the goal, then we have greedy best
    first search; if f is node.depth then we have breadth-first search.
    There is a subtlety: the line \"f = memoize(f, 'f')\" means that the f
    values will be cached on the nodes as they are computed. So after doing
    a best first search you can examine the f values of the path returned."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [8819 8826])
                    ("f" variable nil (reparse-symbol function_parameters) [8828 8829]))                  )
                nil [8791 10062])
            ("uniform_cost_search" function
               (:documentation "[Figure 3.14]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [10088 10095]))                  )
                nil [10064 10195])
            ("depth_limited_search" function
               (:documentation "[Figure 3.17]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [10222 10229])
                    ("limit" variable nil (reparse-symbol function_parameters) [10231 10236]))                  )
                nil [10197 10908])
            ("iterative_deepening_search" function
               (:documentation "[Figure 3.18]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [10941 10948]))                  )
                nil [10910 11123])
            ("bidirectional_search" function (:arguments 
              ( ("problem" variable nil (reparse-symbol function_parameters) [11341 11348]))              ) nil [11316 13459])
            ("greedy_best_first_graph_search" variable nil nil [13573 13629])
            ("astar_search" function
               (:documentation "A* search is best-first graph search with f(n) = g(n)+h(n).
    You need to specify the h function when you call astar_search, or
    else in your Problem subclass."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [13719 13726])
                    ("h" variable nil (reparse-symbol function_parameters) [13728 13729]))                  )
                nil [13702 14023])
            ("EightPuzzle" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14177 14191])
                            ("self" variable nil (reparse-symbol indented_block_body) [14200 14215]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14162 14166]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14149 14216])
                    ("checkSolvability" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14246 14250])
                            ("state" variable nil (reparse-symbol function_parameters) [14252 14257]))                          )
                        (reparse-symbol indented_block_body) [14225 14575])
                    ("getPossibleMoves" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14601 14605])
                            ("state" variable nil (reparse-symbol function_parameters) [14606 14611])
                            ("heuristic" variable nil (reparse-symbol function_parameters) [14612 14621])
                            ("goal" variable nil (reparse-symbol function_parameters) [14622 14626])
                            ("moves" variable nil (reparse-symbol function_parameters) [14627 14632]))                          )
                        (reparse-symbol indented_block_body) [14580 15549])
                    ("create_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15571 15575])
                            ("goal" variable nil (reparse-symbol function_parameters) [15576 15580])
                            ("initial" variable nil (reparse-symbol function_parameters) [15581 15588]))                          )
                        (reparse-symbol indented_block_body) [15555 15942])
                    ("show_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15961 15965])
                            ("initial" variable nil (reparse-symbol function_parameters) [15966 15973]))                          )
                        (reparse-symbol indented_block_body) [15947 16349])
                    ("solve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16364 16368])
                            ("initial" variable nil (reparse-symbol function_parameters) [16369 16376])
                            ("goal" variable nil (reparse-symbol function_parameters) [16377 16381])
                            ("heuristic" variable nil (reparse-symbol function_parameters) [16382 16391]))                          )
                        (reparse-symbol indented_block_body) [16354 17060]))                  
                :type "class")
                nil [14123 17060])
            ("recursive_best_first_search" function
               (:documentation "[Figure 3.26]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [17203 17210])
                    ("h" variable nil (reparse-symbol function_parameters) [17212 17213]))                  )
                nil [17171 18230])
            ("hill_climbing" function
               (:documentation "From the initial node, keep choosing the neighbor with highest value,
    stopping when no neighbor is better. [Figure 4.2]"
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [18250 18257]))                  )
                nil [18232 18807])
            ("exp_schedule" function
               (:documentation "One possible schedule function for simulated annealing"
                :arguments 
                  ( ("k" variable nil (reparse-symbol function_parameters) [18826 18827])
                    ("lam" variable nil (reparse-symbol function_parameters) [18832 18835])
                    ("limit" variable nil (reparse-symbol function_parameters) [18843 18848]))                  )
                nil [18809 18986])
            ("simulated_annealing" function
               (:documentation "[Figure 4.5] CAUTION: This differs from the pseudocode as it
    returns a state instead of a Node."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [19012 19019])
                    ("schedule" variable nil (reparse-symbol function_parameters) [19021 19029]))                  )
                nil [18988 19609])
            ("simulated_annealing_full" function
               (:documentation " This version returns all the states encountered in reaching 
    the goal state."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [19639 19646])
                    ("schedule" variable nil (reparse-symbol function_parameters) [19648 19656]))                  )
                nil [19610 20264])
            ("and_or_graph_search" function
               (:documentation "[Figure 4.11]Used when the environment is nondeterministic and completely observable.
    Contains OR nodes where the agent is free to choose any action.
    After every action there is an AND node which contains all possible states
    the agent may reach due to stochastic nature of environment.
    The agent must be able to handle all possible states of the AND node (as it
    may end up in any of them).
    Returns a conditional plan to reach goal state,
    or failure if the former is not possible."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [20289 20296]))                  )
                nil [20265 21687])
            ("directions4" variable nil nil [21733 21799])
            ("directions8" variable nil nil [21800 21831])
            ("directions8" code nil nil [21833 21910])
            ("PeakFindingProblem" type
               (:documentation "Problem of finding the highest peak in a limited grid"
                :superclasses ("Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"The grid is a 2 dimensional array/list whose state is specified by tuple of indices\"\"\"" code nil (reparse-symbol indented_block_body) [22088 22177])
                            ("Problem" code nil (reparse-symbol indented_block_body) [22186 22217])
                            ("self" variable nil (reparse-symbol indented_block_body) [22226 22242])
                            ("self" variable nil (reparse-symbol indented_block_body) [22251 22289])
                            ("self" variable nil (reparse-symbol indented_block_body) [22298 22316])
                            ("assert" code nil (reparse-symbol indented_block_body) [22325 22342])
                            ("self" variable nil (reparse-symbol indented_block_body) [22351 22372])
                            ("assert" code nil (reparse-symbol indented_block_body) [22381 22398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22029 22033])
                            ("initial" variable nil (reparse-symbol function_parameters) [22035 22042])
                            ("grid" variable nil (reparse-symbol function_parameters) [22044 22048])
                            ("defined_actions" variable nil (reparse-symbol function_parameters) [22050 22065]))                          
                        :documentation "The grid is a 2 dimensional array/list whose state is specified by tuple of indices"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22016 22399])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22416 22420])
                            ("state" variable nil (reparse-symbol function_parameters) [22422 22427]))                          
                        :documentation "Returns the list of actions which are allowed to be taken from the given state")
                        (reparse-symbol indented_block_body) [22404 22870])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22886 22890])
                            ("state" variable nil (reparse-symbol function_parameters) [22892 22897])
                            ("action" variable nil (reparse-symbol function_parameters) [22899 22905]))                          
                        :documentation "Moves in the direction specified by action")
                        (reparse-symbol indented_block_body) [22875 23028])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23043 23047])
                            ("state" variable nil (reparse-symbol function_parameters) [23049 23054]))                          
                        :documentation "Value of a state is the value it is the index to")
                        (reparse-symbol indented_block_body) [23033 23234]))                  
                :type "class")
                nil [21912 23234])
            ("OnlineDFSAgent" type
               (:documentation "[Figure 4.21] The abstract class for an OnlineDFSAgent. Override
    update_state method to convert percept to state. While initializing
    the subclass a problem needs to be provided which is an instance of
    a subclass of the Problem class."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23557 23579])
                            ("self" variable nil (reparse-symbol indented_block_body) [23588 23601])
                            ("self" variable nil (reparse-symbol indented_block_body) [23610 23623])
                            ("self" variable nil (reparse-symbol indented_block_body) [23632 23664])
                            ("self" variable nil (reparse-symbol indented_block_body) [23673 23711])
                            ("self" variable nil (reparse-symbol indented_block_body) [23720 23736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23533 23537])
                            ("problem" variable nil (reparse-symbol function_parameters) [23539 23546]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23520 23737])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23755 23759])
                            ("percept" variable nil (reparse-symbol function_parameters) [23761 23768]))                          )
                        (reparse-symbol indented_block_body) [23742 24823])
                    ("update_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24845 24849])
                            ("percept" variable nil (reparse-symbol function_parameters) [24851 24858]))                          
                        :documentation "To be overridden in most cases. The default case
        assumes the percept to be of type state.")
                        (reparse-symbol indented_block_body) [24828 24996]))                  
                :type "class")
                nil [23236 24996])
            ("OnlineSearchProblem" type
               (:documentation "
    A problem which is solved by an agent executing
    actions, rather than by just computation.
    Carried in a deterministic and a fully observable environment."
                :superclasses ("Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25347 25369])
                            ("self" variable nil (reparse-symbol indented_block_body) [25378 25394])
                            ("self" variable nil (reparse-symbol indented_block_body) [25403 25421]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25310 25314])
                            ("initial" variable nil (reparse-symbol function_parameters) [25316 25323])
                            ("goal" variable nil (reparse-symbol function_parameters) [25325 25329])
                            ("graph" variable nil (reparse-symbol function_parameters) [25331 25336]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25297 25422])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25439 25443])
                            ("state" variable nil (reparse-symbol function_parameters) [25445 25450]))                          )
                        (reparse-symbol indented_block_body) [25427 25498])
                    ("output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25514 25518])
                            ("state" variable nil (reparse-symbol function_parameters) [25520 25525])
                            ("action" variable nil (reparse-symbol function_parameters) [25527 25533]))                          )
                        (reparse-symbol indented_block_body) [25503 25582])
                    ("h" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25593 25597])
                            ("state" variable nil (reparse-symbol function_parameters) [25599 25604]))                          
                        :documentation "Returns least possible cost to reach a goal for the given state.")
                        (reparse-symbol indented_block_body) [25587 25731])
                    ("c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25742 25746])
                            ("s" variable nil (reparse-symbol function_parameters) [25748 25749])
                            ("a" variable nil (reparse-symbol function_parameters) [25751 25752])
                            ("s1" variable nil (reparse-symbol function_parameters) [25754 25756]))                          
                        :documentation "Returns a cost estimate for an agent to move from state 's' to state 's1'.")
                        (reparse-symbol indented_block_body) [25736 25865])
                    ("update_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25887 25891])
                            ("percept" variable nil (reparse-symbol function_parameters) [25893 25900]))                          )
                        (reparse-symbol indented_block_body) [25870 25937])
                    ("goal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25956 25960])
                            ("state" variable nil (reparse-symbol function_parameters) [25962 25967]))                          )
                        (reparse-symbol indented_block_body) [25942 26046]))                  
                :type "class")
                nil [25080 26046])
            ("LRTAStarAgent" type
               (:documentation " [Figure 4.24]
    Abstract class for LRTA*-Agent. A problem needs to be
    provided which is an instance of a subclass of Problem Class.

    Takes a OnlineSearchProblem [Figure 4.23] as a problem.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26327 26349])
                            ("self" variable nil (reparse-symbol indented_block_body) [26431 26442])
                            ("self" variable nil (reparse-symbol indented_block_body) [26451 26464])
                            ("self" variable nil (reparse-symbol indented_block_body) [26473 26486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26303 26307])
                            ("problem" variable nil (reparse-symbol function_parameters) [26309 26316]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26290 26487])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26505 26509])
                            ("s1" variable nil (reparse-symbol function_parameters) [26511 26513]))                          )
                        (reparse-symbol indented_block_body) [26492 27409])
                    ("LRTA_cost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27428 27432])
                            ("s" variable nil (reparse-symbol function_parameters) [27434 27435])
                            ("a" variable nil (reparse-symbol function_parameters) [27437 27438])
                            ("s1" variable nil (reparse-symbol function_parameters) [27440 27442])
                            ("H" variable nil (reparse-symbol function_parameters) [27444 27445]))                          
                        :documentation "Returns cost to move from state 's' to state 's1' plus
        estimated cost to get to goal from s1.")
                        (reparse-symbol indented_block_body) [27414 27996]))                  
                :type "class")
                nil [26048 27996])
            ("genetic_search" function
               (:documentation "Call genetic_algorithm on the appropriate parts of a problem.
    This requires the problem to have states that can mate and mutate,
    plus a value method that scores states."
                :arguments 
                  ( ("problem" variable nil (reparse-symbol function_parameters) [28119 28126])
                    ("fitness_fn" variable nil (reparse-symbol function_parameters) [28128 28138])
                    ("ngen" variable nil (reparse-symbol function_parameters) [28140 28144])
                    ("pmut" variable nil (reparse-symbol function_parameters) [28151 28155])
                    ("n" variable nil (reparse-symbol function_parameters) [28161 28162]))                  )
                nil [28100 28673])
            ("genetic_algorithm" function
               (:documentation "[Figure 4.8]"
                :arguments 
                  ( ("population" variable nil (reparse-symbol function_parameters) [28697 28707])
                    ("fitness_fn" variable nil (reparse-symbol function_parameters) [28709 28719])
                    ("gene_pool" variable nil (reparse-symbol function_parameters) [28721 28730])
                    ("f_thres" variable nil (reparse-symbol function_parameters) [28739 28746])
                    ("ngen" variable nil (reparse-symbol function_parameters) [28753 28757])
                    ("pmut" variable nil (reparse-symbol function_parameters) [28764 28768]))                  )
                nil [28675 29170])
            ("fitness_threshold" function (:arguments 
              ( ("fitness_fn" variable nil (reparse-symbol function_parameters) [29194 29204])
                ("f_thres" variable nil (reparse-symbol function_parameters) [29206 29213])
                ("population" variable nil (reparse-symbol function_parameters) [29215 29225]))              ) nil [29172 29430])
            ("init_population" function
               (:documentation "Initializes population for genetic algorithm
    pop_number  :  Number of individuals in population
    gene_pool   :  List of possible values for individuals
    state_length:  The length of each individual"
                :arguments 
                  ( ("pop_number" variable nil (reparse-symbol function_parameters) [29453 29463])
                    ("gene_pool" variable nil (reparse-symbol function_parameters) [29465 29474])
                    ("state_length" variable nil (reparse-symbol function_parameters) [29476 29488]))                  )
                nil [29433 29939])
            ("select" function (:arguments 
              ( ("r" variable nil (reparse-symbol function_parameters) [29952 29953])
                ("population" variable nil (reparse-symbol function_parameters) [29955 29965])
                ("fitness_fn" variable nil (reparse-symbol function_parameters) [29967 29977]))              ) nil [29941 30119])
            ("recombine" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [30135 30136])
                ("y" variable nil (reparse-symbol function_parameters) [30138 30139]))              ) nil [30121 30213])
            ("mutate" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [30226 30227])
                ("gene_pool" variable nil (reparse-symbol function_parameters) [30229 30238])
                ("pmut" variable nil (reparse-symbol function_parameters) [30240 30244]))              ) nil [30215 30471])
            ("Graph" type
               (:documentation "A graph connects nodes (verticies) by edges (links).  Each edge can also
    have a length associated with it.  The constructor call is something like:
        g = Graph({'A': {'B': 1, 'C': 2})
    this makes a graph with 3 nodes, A, B, and C, with an edge of length 1 from
    A to B,  and an edge of length 2 from A to C.  You can also do:
        g = Graph({'A': {'B': 1, 'C': 2}, directed=False)
    This makes an undirected graph, so inverse links are also added. The graph
    stays undirected; if you add more links with g.connect('B', 'C', 3), then
    inverse link is also added.  You can use g.nodes() to get a list of nodes,
    g.get('A') to get a dict of links out of A, and g.get('A', 'B') to get the
    length of the link from A to B.  'Lengths' can actually be any object at
    all, and nodes can be any hashable object."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [31662 31684])
                            ("self" variable nil (reparse-symbol indented_block_body) [31693 31717])
                            ("if" code nil (reparse-symbol indented_block_body) [31726 31778]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31621 31625])
                            ("dict" variable nil (reparse-symbol function_parameters) [31627 31631])
                            ("directed" variable nil (reparse-symbol function_parameters) [31638 31646]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31608 31778])
                    ("make_undirected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31803 31807]))                          
                        :documentation "Make a digraph into an undirected graph by adding symmetric edges.")
                        (reparse-symbol indented_block_body) [31783 32025])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32042 32046])
                            ("A" variable nil (reparse-symbol function_parameters) [32048 32049])
                            ("B" variable nil (reparse-symbol function_parameters) [32051 32052])
                            ("distance" variable nil (reparse-symbol function_parameters) [32054 32062]))                          
                        :documentation "Add a link from A and B of given distance, and also add the inverse
        link if the graph is undirected.")
                        (reparse-symbol indented_block_body) [32030 32300])
                    ("connect1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32318 32322])
                            ("A" variable nil (reparse-symbol function_parameters) [32324 32325])
                            ("B" variable nil (reparse-symbol function_parameters) [32327 32328])
                            ("distance" variable nil (reparse-symbol function_parameters) [32330 32338]))                          
                        :documentation "Add a link from A to B of given distance, in one direction only.")
                        (reparse-symbol indented_block_body) [32305 32470])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32483 32487])
                            ("a" variable nil (reparse-symbol function_parameters) [32489 32490])
                            ("b" variable nil (reparse-symbol function_parameters) [32492 32493]))                          
                        :documentation "Return a link distance or a dict of {node: distance} entries.
        .get(a,b) returns the distance or None;
        .get(a) returns a dict of {node: distance} entries, possibly {}.")
                        (reparse-symbol indented_block_body) [32475 32835])
                    ("nodes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32850 32854]))                          
                        :documentation "Return a list of nodes in the graph.")
                        (reparse-symbol indented_block_body) [32840 32946]))                  
                :type "class")
                nil [30740 32946])
            ("UndirectedGraph" function
               (:documentation "Build a Graph where every edge (including future ones) goes both ways."
                :arguments 
                  ( ("dict" variable nil (reparse-symbol function_parameters) [32968 32972]))                  )
                nil [32948 33105])
            ("RandomGraph" function
               (:documentation "Construct a random graph, with the specified nodes, and random links.
    The nodes are laid out randomly on a (width x height) rectangle.
    Then each node is connected to the min_links nearest neighbors.
    Because inverse links are added, some nodes will have more connections.
    The distance between nodes is the hypotenuse times curvature(),
    where curvature() defaults to a random number between 1.1 and 1.5."
                :arguments 
                  ( ("nodes" variable nil (reparse-symbol function_parameters) [33123 33128])
                    ("min_links" variable nil (reparse-symbol function_parameters) [33146 33155])
                    ("width" variable nil (reparse-symbol function_parameters) [33159 33164])
                    ("height" variable nil (reparse-symbol function_parameters) [33170 33176])
                    ("curvature" variable nil (reparse-symbol function_parameters) [33198 33207]))                  )
                nil [33107 34456])
            ("\"\"\" [Figure 3.2]
Simplified road map of Romania
\"\"\"" code nil nil [34458 34509])
            ("romania_map" variable nil nil [34510 35051])
            ("romania_map" variable nil nil [35052 35496])
            ("\"\"\" [Figure 4.9]
Eight possible states of the vacumm world
Each state is represented as
   *       \"State of the left room\"      \"State of the right room\"   \"Room in which the agent
                                                                      is present\"
1 - DDL     Dirty                         Dirty                       Left
2 - DDR     Dirty                         Dirty                       Right
3 - DCL     Dirty                         Clean                       Left
4 - DCR     Dirty                         Clean                       Right
5 - CDL     Clean                         Dirty                       Left
6 - CDR     Clean                         Dirty                       Right
7 - CCL     Clean                         Clean                       Left
8 - CCR     Clean                         Clean                       Right
\"\"\"" code nil nil [35498 36369])
            ("vacumm_world" variable nil nil [36370 36904])
            ("\"\"\" [Figure 4.23]
One-dimensional state space Graph
\"\"\"" code nil nil [36906 36961])
            ("one_dim_state_space" variable nil nil [36962 37274])
            ("one_dim_state_space" variable nil nil [37275 37404])
            ("\"\"\" [Figure 6.1]
Principal states and territories of Australia
\"\"\"" code nil nil [37406 37472])
            ("australia_map" variable nil nil [37473 37615])
            ("australia_map" variable nil nil [37616 37804])
            ("GraphProblem" type
               (:documentation "The problem of searching a graph from one node to another."
                :superclasses ("Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Problem" code nil (reparse-symbol indented_block_body) [37961 37998])
                            ("self" variable nil (reparse-symbol indented_block_body) [38007 38025]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37924 37928])
                            ("initial" variable nil (reparse-symbol function_parameters) [37930 37937])
                            ("goal" variable nil (reparse-symbol function_parameters) [37939 37943])
                            ("graph" variable nil (reparse-symbol function_parameters) [37945 37950]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37911 38026])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38043 38047])
                            ("A" variable nil (reparse-symbol function_parameters) [38049 38050]))                          
                        :documentation "The actions at a graph node are just its neighbors.")
                        (reparse-symbol indented_block_body) [38031 38165])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38181 38185])
                            ("state" variable nil (reparse-symbol function_parameters) [38187 38192])
                            ("action" variable nil (reparse-symbol function_parameters) [38194 38200]))                          
                        :documentation "The result of going to a neighbor is just that neighbor.")
                        (reparse-symbol indented_block_body) [38170 38296])
                    ("path_cost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38315 38319])
                            ("cost_so_far" variable nil (reparse-symbol function_parameters) [38321 38332])
                            ("A" variable nil (reparse-symbol function_parameters) [38334 38335])
                            ("action" variable nil (reparse-symbol function_parameters) [38337 38343])
                            ("B" variable nil (reparse-symbol function_parameters) [38345 38346]))                          )
                        (reparse-symbol indented_block_body) [38301 38413])
                    ("find_min_edge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38436 38440]))                          
                        :documentation "Find minimum value of edges.")
                        (reparse-symbol indented_block_body) [38418 38642])
                    ("h" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38653 38657])
                            ("node" variable nil (reparse-symbol function_parameters) [38659 38663]))                          
                        :documentation "h function is straight-line distance from a node's state to goal.")
                        (reparse-symbol indented_block_body) [38647 39028]))                  
                :type "class")
                nil [37807 39028])
            ("GraphProblemStochastic" type
               (:documentation "
    A version of GraphProblem where an action can lead to
    nondeterministic output i.e. multiple possible states.

    Define the graph as dict(A = dict(Action = [[<Result 1>, <Result 2>, ...], <cost>], ...), ...)
    A the dictionary format is different, make sure the graph is created as a directed graph.
    "
                :superclasses ("GraphProblem")
                :members 
                  ( ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39417 39421])
                            ("state" variable nil (reparse-symbol function_parameters) [39423 39428])
                            ("action" variable nil (reparse-symbol function_parameters) [39430 39436]))                          )
                        (reparse-symbol indented_block_body) [39406 39484])
                    ("path_cost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39503 39507]))                          )
                        (reparse-symbol indented_block_body) [39489 39544]))                  
                :type "class")
                nil [39030 39544])
            ("NQueensProblem" type
               (:documentation "The problem of placing N queens on an NxN board with none attacking
    each other.  A state is represented as an N-element array, where
    a value of r in the c-th entry means there is a queen at column c,
    row r, and a value of None means that the c-th column has not been
    filled in yet.  We fill in columns left to right.
    >>> depth_first_tree_search(NQueensProblem(8))
    <Node [7, 3, 0, 2, 5, 1, 6, 4]>
    "
                :superclasses ("Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [40132 40142])
                            ("self" code nil (reparse-symbol indented_block_body) [40151 40176]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40114 40118])
                            ("N" variable nil (reparse-symbol function_parameters) [40120 40121]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40101 40177])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40194 40198])
                            ("state" variable nil (reparse-symbol function_parameters) [40200 40205]))                          
                        :documentation "In the leftmost empty column, try all non-conflicting rows.")
                        (reparse-symbol indented_block_body) [40182 40535])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40551 40555])
                            ("state" variable nil (reparse-symbol function_parameters) [40557 40562])
                            ("row" variable nil (reparse-symbol function_parameters) [40564 40567]))                          
                        :documentation "Place the next queen at the given row.")
                        (reparse-symbol indented_block_body) [40540 40720])
                    ("conflicted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40740 40744])
                            ("state" variable nil (reparse-symbol function_parameters) [40746 40751])
                            ("row" variable nil (reparse-symbol function_parameters) [40753 40756])
                            ("col" variable nil (reparse-symbol function_parameters) [40758 40761]))                          
                        :documentation "Would placing a queen at (row, col) conflict with anything?")
                        (reparse-symbol indented_block_body) [40725 40934])
                    ("conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40952 40956])
                            ("row1" variable nil (reparse-symbol function_parameters) [40958 40962])
                            ("col1" variable nil (reparse-symbol function_parameters) [40964 40968])
                            ("row2" variable nil (reparse-symbol function_parameters) [40970 40974])
                            ("col2" variable nil (reparse-symbol function_parameters) [40976 40980]))                          
                        :documentation "Would putting two queens in (row1, col1) and (row2, col2) conflict?")
                        (reparse-symbol indented_block_body) [40939 41285])
                    ("goal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41304 41308])
                            ("state" variable nil (reparse-symbol function_parameters) [41310 41315]))                          
                        :documentation "Check if all columns filled, no conflicts.")
                        (reparse-symbol indented_block_body) [41290 41546]))                  
                :type "class")
                nil [39629 41546])
            ("ALPHABET" variable nil nil [41786 41825])
            ("cubes16" variable nil nil [41827 42030])
            ("random_boggle" function
               (:documentation "Return a random Boggle board of size n x n.
    We represent a board as a linear list of letters."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [42051 42052]))                  )
                nil [42033 42286])
            ("boyan_best" variable nil nil [42397 42443])
            ("print_boggle" function
               (:documentation "Print the board in a 2-d array."
                :arguments 
                  ( ("board" variable nil (reparse-symbol function_parameters) [42463 42468]))                  )
                nil [42446 42769])
            ("boggle_neighbors" function
               (:documentation "Return a list of lists, where the i-th element is the list of indexes
    for the neighbors of square i."
                :arguments 
                  ( ("n2" variable nil (reparse-symbol function_parameters) [42792 42794])
                    ("cache" variable nil (reparse-symbol function_parameters) [42796 42801]))                  )
                nil [42771 43795])
            ("exact_sqrt" function
               (:documentation "If n2 is a perfect square, return its square root, else raise error."
                :arguments 
                  ( ("n2" variable nil (reparse-symbol function_parameters) [43812 43814]))                  )
                nil [43797 43959])
            ("Wordlist" type
               (:documentation "This class holds a list of words. You can use (word in wordlist)
    to check if a word is in the list, or wordlist.lookup(prefix)
    to see if prefix starts any of the words in the list."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("lines" variable nil (reparse-symbol indented_block_body) [44308 44343])
                            ("self" variable nil (reparse-symbol indented_block_body) [44352 44413])
                            ("self" code nil (reparse-symbol indented_block_body) [44422 44439])
                            ("self" variable nil (reparse-symbol indented_block_body) [44448 44464])
                            ("for" code nil (reparse-symbol indented_block_body) [44473 44646]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44276 44280])
                            ("file" variable nil (reparse-symbol function_parameters) [44282 44286])
                            ("min_len" variable nil (reparse-symbol function_parameters) [44288 44295]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44263 44646])
                    ("lookup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44662 44666])
                            ("prefix" variable nil (reparse-symbol function_parameters) [44668 44674])
                            ("lo" variable nil (reparse-symbol function_parameters) [44676 44678])
                            ("hi" variable nil (reparse-symbol function_parameters) [44682 44684]))                          
                        :documentation "See if prefix is in dictionary, as a full word or as a prefix.
        Return two values: the first is the lowest i such that
        words[i].startswith(prefix), or is None; the second is
        True iff prefix itself is in the Wordlist.")
                        (reparse-symbol indented_block_body) [44651 45225])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45247 45251])
                            ("word" variable nil (reparse-symbol function_parameters) [45253 45257]))                          )
                        (reparse-symbol indented_block_body) [45230 45296])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45313 45317]))                          )
                        (reparse-symbol indented_block_body) [45301 45351]))                  
                :type "class")
                nil [44042 45351])
            ("BoggleFinder" type
               (:documentation "A class that allows you to find all the words in a Boggle board."
                :members 
                  ( ("wordlist" variable nil (reparse-symbol indented_block_body) [45535 45550])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [45636 45750])
                            ("self" variable nil (reparse-symbol indented_block_body) [45758 45773])
                            ("if" code nil (reparse-symbol indented_block_body) [45782 45826]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45609 45613])
                            ("board" variable nil (reparse-symbol function_parameters) [45615 45620]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45596 45826])
                    ("set_board" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45845 45849])
                            ("board" variable nil (reparse-symbol function_parameters) [45851 45856]))                          
                        :documentation "Set the board, and find all the words in it.")
                        (reparse-symbol indented_block_body) [45831 46239])
                    ("find" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46253 46257])
                            ("lo" variable nil (reparse-symbol function_parameters) [46259 46261])
                            ("hi" variable nil (reparse-symbol function_parameters) [46263 46265])
                            ("i" variable nil (reparse-symbol function_parameters) [46267 46268])
                            ("visited" variable nil (reparse-symbol function_parameters) [46270 46277])
                            ("prefix" variable nil (reparse-symbol function_parameters) [46279 46285]))                          
                        :documentation "Looking in square i, find the words that continue the prefix,
        considering the entries in self.wordlist.words[lo:hi], and not
        revisiting the squares in visited.")
                        (reparse-symbol indented_block_body) [46244 46943])
                    ("words" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46958 46962]))                          
                        :documentation "The words found.")
                        (reparse-symbol indented_block_body) [46948 47035])
                    ("scores" code nil (reparse-symbol indented_block_body) [47040 47086])
                    ("score" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47102 47106]))                          
                        :documentation "The total score for the words found, according to the rules.")
                        (reparse-symbol indented_block_body) [47092 47248])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47265 47269]))                          
                        :documentation "The number of words found.")
                        (reparse-symbol indented_block_body) [47253 47344]))                  
                :type "class")
                nil [45434 47344])
            ("boggle_hill_climbing" function
               (:documentation "Solve inverse Boggle by hill-climbing: find a high-scoring board by
    starting with a random one and changing it."
                :arguments 
                  ( ("board" variable nil (reparse-symbol function_parameters) [47452 47457])
                    ("ntimes" variable nil (reparse-symbol function_parameters) [47464 47470])
                    ("verbose" variable nil (reparse-symbol function_parameters) [47476 47483]))                  )
                nil [47427 48081])
            ("mutate_boggle" function (:arguments 
              ( ("board" variable nil (reparse-symbol function_parameters) [48101 48106]))              ) nil [48083 48270])
            ("InstrumentedProblem" type
               (:documentation "Delegates to a problem, and keeps statistics."
                :superclasses ("Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [48539 48561])
                            ("self" variable nil (reparse-symbol indented_block_body) [48570 48616])
                            ("self" variable nil (reparse-symbol indented_block_body) [48625 48642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48515 48519])
                            ("problem" variable nil (reparse-symbol function_parameters) [48521 48528]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48502 48643])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48660 48664])
                            ("state" variable nil (reparse-symbol function_parameters) [48666 48671]))                          )
                        (reparse-symbol indented_block_body) [48648 48741])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48757 48761])
                            ("state" variable nil (reparse-symbol function_parameters) [48763 48768])
                            ("action" variable nil (reparse-symbol function_parameters) [48770 48776]))                          )
                        (reparse-symbol indented_block_body) [48746 48854])
                    ("goal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48873 48877])
                            ("state" variable nil (reparse-symbol function_parameters) [48879 48884]))                          )
                        (reparse-symbol indented_block_body) [48859 49035])
                    ("path_cost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49054 49058])
                            ("c" variable nil (reparse-symbol function_parameters) [49060 49061])
                            ("state1" variable nil (reparse-symbol function_parameters) [49063 49069])
                            ("action" variable nil (reparse-symbol function_parameters) [49071 49077])
                            ("state2" variable nil (reparse-symbol function_parameters) [49079 49085]))                          )
                        (reparse-symbol indented_block_body) [49040 49153])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49168 49172])
                            ("state" variable nil (reparse-symbol function_parameters) [49174 49179]))                          )
                        (reparse-symbol indented_block_body) [49158 49223])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49244 49248])
                            ("attr" variable nil (reparse-symbol function_parameters) [49250 49254]))                          )
                        (reparse-symbol indented_block_body) [49228 49300])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49318 49322]))                          )
                        (reparse-symbol indented_block_body) [49305 49482]))                  
                :type "class")
                nil [48404 49482])
            ("compare_searchers" function (:arguments 
              ( ("problems" variable nil (reparse-symbol function_parameters) [49506 49514])
                ("header" variable nil (reparse-symbol function_parameters) [49516 49522])
                ("searchers" variable nil (reparse-symbol function_parameters) [49546 49555]))              ) nil [49484 50092])
            ("compare_graph_searchers" function (:documentation "Prints a table of search results.") nil [50094 50552]))          
      :file "search.py"
      :pointmax 50553
      :fsize 50552
      :lastmodtime '(23159 25875 622160 255000)
      :unmatched-syntax '((RETURN 10762 . 10768) (IF 10778 . 10780) (ELSE 10797 . 10801)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"CSP (Constraint Satisfaction Problems) problems and solvers. (Chapter 6).\"\"\"" code nil nil [1 80])
            ("utils" include nil nil [82 131])
            ("search" include nil nil [132 145])
            ("collections" include nil nil [147 182])
            ("functools" include nil nil [183 211])
            ("itertools" include nil nil [213 229])
            ("re" include nil nil [230 239])
            ("random" include nil nil [240 253])
            ("CSP" type
               (:documentation "This class describes finite-domain Constraint Satisfaction Problems.
    A CSP is specified by the following inputs:
        variables   A list of variables; each is atomic (e.g. int or string).
        domains     A dict of {var:[possible_value, ...]} entries.
        neighbors   A dict of {var:[var,...]} that for each variable lists
                    the other variables that participate in constraints.
        constraints A function f(A, a, B, b) that returns true if neighbors
                    A, B satisfy the constraint when they have values A=a, B=b

    In the textbook and in most mathematical definitions, the
    constraints are specified as explicit pairs of allowable values,
    but the formulation here is easier to express and more compact for
    most cases. (For example, the n-Queens problem can be represented
    in O(n) space using this notation, instead of O(N^4) for the
    explicit representation.) In terms of describing the CSP as a
    problem, that's all there is.

    However, the class also supports data structures and methods that help you
    solve CSPs by calling a search function on the CSP. Methods and slots are
    as follows, where the argument 'a' represents an assignment, which is a
    dict of {var:val} entries:
        assign(var, val, a)     Assign a[var] = val; do other bookkeeping
        unassign(var, a)        Do del a[var], plus other bookkeeping
        nconflicts(var, val, a) Return the number of other variables that
                                conflict with var=val
        curr_domains[var]       Slot: remaining consistent values for var
                                Used by constraint propagation routines.
    The following methods are used only by graph_search and tree_search:
        actions(state)          Return a list of actions
        result(state, action)   Return a successor of state
        goal_test(state)        Return true if all constraints satisfied
    The following are just for debugging purposes:
        nassigns                Slot: tracks the number of assignments made
        display(a)              Print a human-readable representation
    "
                :superclasses ("search.Problem")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a CSP problem. If variables is empty, it becomes domains.keys().\"\"\"" code nil (reparse-symbol indented_block_body) [2522 2602])
                            ("variables" code nil (reparse-symbol indented_block_body) [2611 2656])
                            ("self" variable nil (reparse-symbol indented_block_body) [2666 2692])
                            ("self" variable nil (reparse-symbol indented_block_body) [2701 2723])
                            ("self" variable nil (reparse-symbol indented_block_body) [2732 2758])
                            ("self" variable nil (reparse-symbol indented_block_body) [2767 2797])
                            ("self" variable nil (reparse-symbol indented_block_body) [2806 2823])
                            ("self" variable nil (reparse-symbol indented_block_body) [2832 2856])
                            ("self" variable nil (reparse-symbol indented_block_body) [2865 2882]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2463 2467])
                            ("variables" variable nil (reparse-symbol function_parameters) [2469 2478])
                            ("domains" variable nil (reparse-symbol function_parameters) [2480 2487])
                            ("neighbors" variable nil (reparse-symbol function_parameters) [2489 2498])
                            ("constraints" variable nil (reparse-symbol function_parameters) [2500 2511]))                          
                        :documentation "Construct a CSP problem. If variables is empty, it becomes domains.keys()."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2450 2883])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2899 2903])
                            ("var" variable nil (reparse-symbol function_parameters) [2905 2908])
                            ("val" variable nil (reparse-symbol function_parameters) [2910 2913])
                            ("assignment" variable nil (reparse-symbol function_parameters) [2915 2925]))                          
                        :documentation "Add {var: val} to assignment; Discard the old value if any.")
                        (reparse-symbol indented_block_body) [2888 3059])
                    ("unassign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3077 3081])
                            ("var" variable nil (reparse-symbol function_parameters) [3083 3086])
                            ("assignment" variable nil (reparse-symbol function_parameters) [3088 3098]))                          
                        :documentation "Remove {var: val} from assignment.
        DO NOT call this if you are changing a variable to a new value;
        just call assign for that.")
                        (reparse-symbol indented_block_body) [3064 3319])
                    ("nconflicts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3339 3343])
                            ("var" variable nil (reparse-symbol function_parameters) [3345 3348])
                            ("val" variable nil (reparse-symbol function_parameters) [3350 3353])
                            ("assignment" variable nil (reparse-symbol function_parameters) [3355 3365]))                          
                        :documentation "Return the number of conflicts var=val has with other variables.")
                        (reparse-symbol indented_block_body) [3324 3714])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3731 3735])
                            ("assignment" variable nil (reparse-symbol function_parameters) [3737 3747]))                          
                        :documentation "Show a human-readable representation of the CSP.")
                        (reparse-symbol indented_block_body) [3719 3945])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4028 4032])
                            ("state" variable nil (reparse-symbol function_parameters) [4034 4039]))                          
                        :documentation "Return a list of applicable actions: nonconflicting
        assignments to an unassigned variable.")
                        (reparse-symbol indented_block_body) [4016 4477])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4493 4497])
                            ("state" variable nil (reparse-symbol function_parameters) [4499 4504])
                            ("action" variable nil (reparse-symbol function_parameters) [4506 4512]))                          
                        :documentation "Perform an action and return the new state.")
                        (reparse-symbol indented_block_body) [4482 4638])
                    ("goal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4657 4661])
                            ("state" variable nil (reparse-symbol function_parameters) [4663 4668]))                          
                        :documentation "The goal is to assign all variables, with all constraints satisfied.")
                        (reparse-symbol indented_block_body) [4643 4991])
                    ("support_pruning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5060 5064]))                          
                        :documentation "Make sure we can prune values from domains. (We want to pay
        for this only if we use it.)")
                        (reparse-symbol indented_block_body) [5040 5299])
                    ("suppose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5316 5320])
                            ("var" variable nil (reparse-symbol function_parameters) [5322 5325])
                            ("value" variable nil (reparse-symbol function_parameters) [5327 5332]))                          
                        :documentation "Start accumulating inferences from assuming var=value.")
                        (reparse-symbol indented_block_body) [5304 5576])
                    ("prune" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5591 5595])
                            ("var" variable nil (reparse-symbol function_parameters) [5597 5600])
                            ("value" variable nil (reparse-symbol function_parameters) [5602 5607])
                            ("removals" variable nil (reparse-symbol function_parameters) [5609 5617]))                          
                        :documentation "Rule out var=value.")
                        (reparse-symbol indented_block_body) [5581 5774])
                    ("choices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5791 5795])
                            ("var" variable nil (reparse-symbol function_parameters) [5797 5800]))                          
                        :documentation "Return all values for var that aren't currently ruled out.")
                        (reparse-symbol indented_block_body) [5779 5932])
                    ("infer_assignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962]))                          
                        :documentation "Return the partial assignment implied by the current inferences.")
                        (reparse-symbol indented_block_body) [5937 6193])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6210 6214])
                            ("removals" variable nil (reparse-symbol function_parameters) [6216 6224]))                          
                        :documentation "Undo a supposition and all inferences from it.")
                        (reparse-symbol indented_block_body) [6198 6361])
                    ("conflicted_vars" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6426 6430])
                            ("current" variable nil (reparse-symbol function_parameters) [6432 6439]))                          
                        :documentation "Return a list of variables in current assignment that are in conflict")
                        (reparse-symbol indented_block_body) [6406 6640]))                  
                :type "class")
                nil [256 6640])
            ("AC3" function
               (:documentation "[Figure 6.3]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [6767 6770])
                    ("queue" variable nil (reparse-symbol function_parameters) [6772 6777])
                    ("removals" variable nil (reparse-symbol function_parameters) [6784 6792]))                  )
                nil [6759 7502])
            ("revise" function
               (:documentation "Return true if we remove a value."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [7515 7518])
                    ("Xi" variable nil (reparse-symbol function_parameters) [7520 7522])
                    ("Xj" variable nil (reparse-symbol function_parameters) [7524 7526])
                    ("removals" variable nil (reparse-symbol function_parameters) [7528 7536]))                  )
                nil [7504 7882])
            ("first_unassigned_variable" function
               (:documentation "The default variable order."
                :arguments 
                  ( ("assignment" variable nil (reparse-symbol function_parameters) [8043 8053])
                    ("csp" variable nil (reparse-symbol function_parameters) [8055 8058]))                  )
                nil [8013 8173])
            ("mrv" function
               (:documentation "Minimum-remaining-values heuristic."
                :arguments 
                  ( ("assignment" variable nil (reparse-symbol function_parameters) [8183 8193])
                    ("csp" variable nil (reparse-symbol function_parameters) [8195 8198]))                  )
                nil [8175 8400])
            ("num_legal_values" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [8423 8426])
                ("var" variable nil (reparse-symbol function_parameters) [8428 8431])
                ("assignment" variable nil (reparse-symbol function_parameters) [8433 8443]))              ) nil [8402 8636])
            ("unordered_domain_values" function
               (:documentation "The default value order."
                :arguments 
                  ( ("var" variable nil (reparse-symbol function_parameters) [8684 8687])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8689 8699])
                    ("csp" variable nil (reparse-symbol function_parameters) [8701 8704]))                  )
                nil [8656 8770])
            ("lcv" function
               (:documentation "Least-constraining-values heuristic."
                :arguments 
                  ( ("var" variable nil (reparse-symbol function_parameters) [8780 8783])
                    ("assignment" variable nil (reparse-symbol function_parameters) [8785 8795])
                    ("csp" variable nil (reparse-symbol function_parameters) [8797 8800]))                  )
                nil [8772 8958])
            ("no_inference" function (:arguments 
              ( ("csp" variable nil (reparse-symbol function_parameters) [8990 8993])
                ("var" variable nil (reparse-symbol function_parameters) [8995 8998])
                ("value" variable nil (reparse-symbol function_parameters) [9000 9005])
                ("assignment" variable nil (reparse-symbol function_parameters) [9007 9017])
                ("removals" variable nil (reparse-symbol function_parameters) [9019 9027]))              ) nil [8973 9046])
            ("forward_checking" function
               (:documentation "Prune neighbor values inconsistent with var=value."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [9069 9072])
                    ("var" variable nil (reparse-symbol function_parameters) [9074 9077])
                    ("value" variable nil (reparse-symbol function_parameters) [9079 9084])
                    ("assignment" variable nil (reparse-symbol function_parameters) [9086 9096])
                    ("removals" variable nil (reparse-symbol function_parameters) [9098 9106]))                  )
                nil [9048 9736])
            ("mac" function
               (:documentation "Maintain arc consistency."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [9746 9749])
                    ("var" variable nil (reparse-symbol function_parameters) [9751 9754])
                    ("value" variable nil (reparse-symbol function_parameters) [9756 9761])
                    ("assignment" variable nil (reparse-symbol function_parameters) [9763 9773])
                    ("removals" variable nil (reparse-symbol function_parameters) [9775 9783]))                  )
                nil [9738 9892])
            ("backtracking_search" function
               (:documentation "[Figure 6.5]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [9940 9943])
                    ("select_unassigned_variable" variable nil (reparse-symbol function_parameters) [9969 9995])
                    ("order_domain_values" variable nil (reparse-symbol function_parameters) [10047 10066])
                    ("inference" variable nil (reparse-symbol function_parameters) [10116 10125]))                  )
                nil [9916 11138])
            ("min_conflicts" function
               (:documentation "Solve a CSP by stochastic hillclimbing on the number of conflicts."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [11285 11288])
                    ("max_steps" variable nil (reparse-symbol function_parameters) [11290 11299]))                  )
                nil [11267 11972])
            ("min_conflicts_value" function
               (:documentation "Return the value that will give var the least number of conflicts.
    If there is a tie, choose at random."
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [11998 12001])
                    ("var" variable nil (reparse-symbol function_parameters) [12003 12006])
                    ("current" variable nil (reparse-symbol function_parameters) [12008 12015]))                  )
                nil [11974 12263])
            ("tree_csp_solver" function
               (:documentation "[Figure 6.11]"
                :arguments 
                  ( ("csp" variable nil (reparse-symbol function_parameters) [12367 12370]))                  )
                nil [12347 12847])
            ("topological_sort" function
               (:documentation "Returns the topological sort of X starting from the root.

    Input:
    X is a list with the nodes of the graph
    N is the dictionary with the neighbors of each node
    root denotes the root of the graph.

    Output:
    stack is a list with the nodes topologically sorted
    parents is a dictionary pointing to each node's parent

    Other:
    visited shows the state (visited - not visited) of nodes

    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [12870 12871])
                    ("root" variable nil (reparse-symbol function_parameters) [12873 12877]))                  )
                nil [12849 13507])
            ("build_topological" function
               (:documentation "Builds the topological sort and the parents of each node in the graph"
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [13531 13535])
                    ("parent" variable nil (reparse-symbol function_parameters) [13537 13543])
                    ("neighbors" variable nil (reparse-symbol function_parameters) [13545 13554])
                    ("visited" variable nil (reparse-symbol function_parameters) [13556 13563])
                    ("stack" variable nil (reparse-symbol function_parameters) [13565 13570])
                    ("parents" variable nil (reparse-symbol function_parameters) [13572 13579]))                  )
                nil [13509 13875])
            ("make_arc_consistent" function
               (:documentation "Make arc between parent (Xj) and child (Xk) consistent under the csp's constraints,
    by removing the possible values of Xj that cause inconsistencies."
                :arguments 
                  ( ("Xj" variable nil (reparse-symbol function_parameters) [13901 13903])
                    ("Xk" variable nil (reparse-symbol function_parameters) [13905 13907])
                    ("csp" variable nil (reparse-symbol function_parameters) [13909 13912]))                  )
                nil [13877 14518])
            ("assign_value" function
               (:documentation "Assign a value to Xk given Xj's (Xk's parent) assignment.
    Return the first value that satisfies the constraints."
                :arguments 
                  ( ("Xj" variable nil (reparse-symbol function_parameters) [14537 14539])
                    ("Xk" variable nil (reparse-symbol function_parameters) [14541 14543])
                    ("csp" variable nil (reparse-symbol function_parameters) [14545 14548])
                    ("assignment" variable nil (reparse-symbol function_parameters) [14550 14560]))                  )
                nil [14520 14907])
            ("UniversalDict" type
               (:documentation "A universal dict maps any key to the same value. We use it here
    as the domains dict for CSPs in which all variables have the same domain.
    >>> d = UniversalDict(42)
    >>> d['life']
    42
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil nil nil))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15266 15270])
                            ("value" variable nil (reparse-symbol function_parameters) [15272 15277]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15253 15299])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15320 15324])
                            ("key" variable nil (reparse-symbol function_parameters) [15326 15329]))                          )
                        (reparse-symbol indented_block_body) [15304 15350])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15368 15372]))                          )
                        (reparse-symbol indented_block_body) [15355 15418]))                  
                :type "class")
                nil [15015 15418])
            ("different_values_constraint" function
               (:documentation "A constraint saying two neighboring variables must differ in value."
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [15452 15453])
                    ("a" variable nil (reparse-symbol function_parameters) [15455 15456])
                    ("B" variable nil (reparse-symbol function_parameters) [15458 15459])
                    ("b" variable nil (reparse-symbol function_parameters) [15461 15462]))                  )
                nil [15420 15561])
            ("MapColoringCSP" function
               (:documentation "Make a CSP for the problem of coloring a map with different colors
    for any two adjacent regions. Arguments are a list of colors, and a
    dict of {region: [neighbor,...]} entries. This dict may also be
    specified as a string of the form defined by parse_neighbors."
                :arguments 
                  ( ("colors" variable nil (reparse-symbol function_parameters) [15582 15588])
                    ("neighbors" variable nil (reparse-symbol function_parameters) [15590 15599]))                  )
                nil [15563 16084])
            ("parse_neighbors" function
               (:documentation "Convert a string of the form 'X: Y Z; Y: Z' into a dict mapping
    regions to neighbors. The syntax is a region name followed by a ':'
    followed by zero or more region names, followed by ';', repeated for
    each region name. If you say 'X: Y' you don't need 'Y: X'.
    >>> parse_neighbors('X: Y Z; Y: Z') == {'Y': ['X', 'Z'], 'X': ['Y', 'Z'], 'Z': ['X', 'Y']}
    True
    "
                :arguments 
                  ( ("neighbors" variable nil (reparse-symbol function_parameters) [16106 16115])
                    ("variables" variable nil (reparse-symbol function_parameters) [16117 16126]))                  )
                nil [16086 16780])
            ("australia" variable nil nil [16782 16894])
            ("usa" variable nil nil [16896 17566])
            ("france" variable nil nil [17568 18038])
            ("queen_constraint" function
               (:documentation "Constraint is satisfied (true) if A, B are really the same variable,
    or if they are not in the same row, down diagonal, or up diagonal."
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [18163 18164])
                    ("a" variable nil (reparse-symbol function_parameters) [18166 18167])
                    ("B" variable nil (reparse-symbol function_parameters) [18169 18170])
                    ("b" variable nil (reparse-symbol function_parameters) [18172 18173]))                  )
                nil [18142 18394])
            ("NQueensCSP" type
               (:documentation "Make a CSP for the nQueens problem for search with min_conflicts.
    Suitable for large n, it uses only data structures of size O(n).
    Think of placing queens one per column, from left to right.
    That means position (x, y) represents (var, val) in the CSP.
    The main structures are three arrays to count queens that could conflict:
        rows[i]      Number of queens in the ith row (i.e val == i)
        downs[i]     Number of queens in the \\ diagonal
                     such that their (x, y) coordinates sum to i
        ups[i]       Number of queens in the / diagonal
                     such that their (x, y) coordinates have x-y+n-1 = i
    We increment/decrement these counts each time a queen is placed/moved from
    a row/diagonal. So moving is O(1), as is nconflicts.  But choosing
    a variable, and a best value for the variable, are each O(n).
    If you want, you can keep track of conflicted variables, then variable
    selection will also be O(1).
    >>> len(backtracking_search(NQueensCSP(8)))
    8
    "
                :superclasses ("CSP")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize data structures for n Queens.\"\"\"" code nil (reparse-symbol indented_block_body) [19508 19554])
                            ("CSP" code nil (reparse-symbol indented_block_body) [19563 19698])
                            ("self" code nil (reparse-symbol indented_block_body) [19708 19725])
                            ("self" code nil (reparse-symbol indented_block_body) [19734 19758])
                            ("self" code nil (reparse-symbol indented_block_body) [19767 19793]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19490 19494])
                            ("n" variable nil (reparse-symbol function_parameters) [19496 19497]))                          
                        :documentation "Initialize data structures for n Queens."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19477 19794])
                    ("nconflicts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19814 19818])
                            ("var" variable nil (reparse-symbol function_parameters) [19820 19823])
                            ("val" variable nil (reparse-symbol function_parameters) [19825 19828])
                            ("assignment" variable nil (reparse-symbol function_parameters) [19830 19840]))                          
                        :documentation "The number of conflicts, as recorded with each assignment.
        Count conflicts in row and in up, down diagonals. If there
        is a queen there, it can't conflict with itself, so subtract 3.")
                        (reparse-symbol indented_block_body) [19799 20241])
                    ("assign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20257 20261])
                            ("var" variable nil (reparse-symbol function_parameters) [20263 20266])
                            ("val" variable nil (reparse-symbol function_parameters) [20268 20271])
                            ("assignment" variable nil (reparse-symbol function_parameters) [20273 20283]))                          
                        :documentation "Assign var, and keep track of conflicts.")
                        (reparse-symbol indented_block_body) [20246 20656])
                    ("unassign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20674 20678])
                            ("var" variable nil (reparse-symbol function_parameters) [20680 20683])
                            ("assignment" variable nil (reparse-symbol function_parameters) [20685 20695]))                          
                        :documentation "Remove var from assignment (if it is there) and track conflicts.")
                        (reparse-symbol indented_block_body) [20661 20922])
                    ("record_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20947 20951])
                            ("assignment" variable nil (reparse-symbol function_parameters) [20953 20963])
                            ("var" variable nil (reparse-symbol function_parameters) [20965 20968])
                            ("val" variable nil (reparse-symbol function_parameters) [20970 20973])
                            ("delta" variable nil (reparse-symbol function_parameters) [20975 20980]))                          
                        :documentation "Record conflicts caused by addition or deletion of a Queen.")
                        (reparse-symbol indented_block_body) [20927 21205])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21222 21226])
                            ("assignment" variable nil (reparse-symbol function_parameters) [21228 21238]))                          
                        :documentation "Print the queens and the nconflicts values (for debugging).")
                        (reparse-symbol indented_block_body) [21210 21946]))                  
                :type "class")
                nil [18396 21946])
            ("flatten" function (:arguments 
              ( ("seqs" variable nil (reparse-symbol function_parameters) [22051 22055]))              ) nil [22039 22083])
            ("easy1" variable nil nil [22085 22176])
            ("harder1" variable nil nil [22177 22270])
            ("_R3" variable nil nil [22272 22292])
            ("_CELL" variable nil nil [22293 22327])
            ("_BGRID" variable nil nil [22328 22406])
            ("_BOXES" variable nil nil [22407 22470])
            ("_ROWS" variable nil nil [22471 22539])
            ("_COLS" variable nil nil [22540 22565])
            ("_NEIGHBORS" variable nil nil [22567 22614])
            ("for" code nil nil [22615 22721])
            ("Sudoku" type
               (:documentation "A Sudoku problem.
    The box grid is a 3x3 array of boxes, each a 3x3 array of cells.
    Each cell holds a digit in 1..9. In each box, all digits are
    different; the same for each row and column as a 9x9 grid.
    >>> e = Sudoku(easy1)
    >>> e.display(e.infer_assignment())
    . . 3 | . 2 . | 6 . .
    9 . . | 3 . 5 | . . 1
    . . 1 | 8 . 6 | 4 . .
    ------+-------+------
    . . 8 | 1 . 2 | 9 . .
    7 . . | . . . | . . 8
    . . 6 | 7 . 8 | 2 . .
    ------+-------+------
    . . 2 | 6 . 9 | 5 . .
    8 . . | 2 . 3 | . . 9
    . . 5 | . 1 . | 3 . .
    >>> AC3(e); e.display(e.infer_assignment())
    True
    4 8 3 | 9 2 1 | 6 5 7
    9 6 7 | 3 4 5 | 8 2 1
    2 5 1 | 8 7 6 | 4 9 3
    ------+-------+------
    5 4 8 | 1 3 2 | 9 7 6
    7 2 9 | 5 6 4 | 1 3 8
    1 3 6 | 7 9 8 | 2 4 5
    ------+-------+------
    3 7 2 | 6 8 9 | 5 1 4
    8 1 4 | 2 5 3 | 7 6 9
    6 9 5 | 4 1 7 | 3 8 2
    >>> h = Sudoku(harder1)
    >>> backtracking_search(h, select_unassigned_variable=mrv, inference=forward_checking) is not None
    True
    "
                :superclasses ("CSP")
                :members 
                  ( ("R3" variable nil (reparse-symbol indented_block_body) [23820 23828])
                    ("Cell" variable nil (reparse-symbol indented_block_body) [23833 23845])
                    ("bgrid" variable nil (reparse-symbol indented_block_body) [23850 23864])
                    ("boxes" variable nil (reparse-symbol indented_block_body) [23869 23883])
                    ("rows" variable nil (reparse-symbol indented_block_body) [23888 23900])
                    ("cols" variable nil (reparse-symbol indented_block_body) [23905 23917])
                    ("neighbors" variable nil (reparse-symbol indented_block_body) [23922 23944])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Build a Sudoku problem from a string representing the grid:
        the digits 1-9 denote a filled cell, '.' or '0' an empty one;
        other characters are ignored.\"\"\"" code nil (reparse-symbol indented_block_body) [23984 24157])
                            ("squares" variable nil (reparse-symbol indented_block_body) [24166 24208])
                            ("domains" variable nil (reparse-symbol indented_block_body) [24217 24343])
                            ("for" code nil (reparse-symbol indented_block_body) [24352 24446])
                            ("CSP" code nil (reparse-symbol indented_block_body) [24454 24532]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23963 23967])
                            ("grid" variable nil (reparse-symbol function_parameters) [23969 23973]))                          
                        :documentation "Build a Sudoku problem from a string representing the grid:
        the digits 1-9 denote a filled cell, '.' or '0' an empty one;
        other characters are ignored."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23950 24533])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24550 24554])
                            ("assignment" variable nil (reparse-symbol function_parameters) [24556 24566]))                          )
                        (reparse-symbol indented_block_body) [24538 24969]))                  
                :type "class")
                nil [22723 24969])
            ("Zebra" function (:documentation "Return an instance of the Zebra Puzzle.") nil [25071 27654])
            ("solve_zebra" function (:arguments 
              ( ("algorithm" variable nil (reparse-symbol function_parameters) [27672 27681])
                ("args" variable nil (reparse-symbol function_parameters) [27697 27703]))              ) nil [27656 27985]))          
      :file "csp.py"
      :pointmax 27985
      :fsize 27984
      :lastmodtime '(23189 45253 898292 887000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Games, or Adversarial Search (Chapter 5)\"\"\"" code nil nil [1 47])
            ("collections" include nil nil [49 83])
            ("random" include nil nil [84 97])
            ("utils" include nil nil [99 123])
            ("infinity" variable nil nil [125 148])
            ("GameState" variable nil nil [149 218])
            ("minimax_decision" function
               (:documentation "Given a state in a game, calculate the best move by searching
    forward all the way to the terminal states. [Figure 5.3]"
                :arguments 
                  ( ("state" variable nil (reparse-symbol function_parameters) [341 346])
                    ("game" variable nil (reparse-symbol function_parameters) [348 352]))                  )
                nil [320 1151])
            ("alphabeta_search" function
               (:documentation "Search game to determine best action; use alpha-beta pruning.
    As in [Figure 5.7], this version searches all the way to the leaves."
                :arguments 
                  ( ("state" variable nil (reparse-symbol function_parameters) [1256 1261])
                    ("game" variable nil (reparse-symbol function_parameters) [1263 1267]))                  )
                nil [1235 2507])
            ("alphabeta_cutoff_search" function
               (:documentation "Search game to determine best action; use alpha-beta pruning.
    This version cuts off search and uses an evaluation function."
                :arguments 
                  ( ("state" variable nil (reparse-symbol function_parameters) [2537 2542])
                    ("game" variable nil (reparse-symbol function_parameters) [2544 2548])
                    ("d" variable nil (reparse-symbol function_parameters) [2550 2551])
                    ("cutoff_test" variable nil (reparse-symbol function_parameters) [2555 2566])
                    ("eval_fn" variable nil (reparse-symbol function_parameters) [2573 2580]))                  )
                nil [2509 4180])
            ("query_player" function
               (:documentation "Make a move by querying standard input."
                :arguments 
                  ( ("game" variable nil (reparse-symbol function_parameters) [4301 4305])
                    ("state" variable nil (reparse-symbol function_parameters) [4307 4312]))                  )
                nil [4284 4638])
            ("random_player" function
               (:documentation "A player that chooses a legal move at random."
                :arguments 
                  ( ("game" variable nil (reparse-symbol function_parameters) [4658 4662])
                    ("state" variable nil (reparse-symbol function_parameters) [4664 4669]))                  )
                nil [4640 4774])
            ("alphabeta_player" function (:arguments 
              ( ("game" variable nil (reparse-symbol function_parameters) [4797 4801])
                ("state" variable nil (reparse-symbol function_parameters) [4803 4808]))              ) nil [4776 4852])
            ("Game" type
               (:documentation "A game is similar to a problem, but it has a utility for each
    state and a terminal test instead of a path cost and a goal
    test. To create a game, subclass this class and implement actions,
    result, utility, and terminal_test. You may override display and
    successors or you can inherit their default methods. You will also
    need to set the .initial attribute to the initial state; this can
    be done in the constructor."
                :members 
                  ( ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5435 5439])
                            ("state" variable nil (reparse-symbol function_parameters) [5441 5446]))                          
                        :documentation "Return a list of the allowable moves at this point.")
                        (reparse-symbol indented_block_body) [5423 5549])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5565 5569])
                            ("state" variable nil (reparse-symbol function_parameters) [5571 5576])
                            ("move" variable nil (reparse-symbol function_parameters) [5578 5582]))                          
                        :documentation "Return the state that results from making a move from a state.")
                        (reparse-symbol indented_block_body) [5554 5696])
                    ("utility" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5713 5717])
                            ("state" variable nil (reparse-symbol function_parameters) [5719 5724])
                            ("player" variable nil (reparse-symbol function_parameters) [5726 5732]))                          
                        :documentation "Return the value of this final state to player.")
                        (reparse-symbol indented_block_body) [5701 5831])
                    ("terminal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5854 5858])
                            ("state" variable nil (reparse-symbol function_parameters) [5860 5865]))                          
                        :documentation "Return True if this is a final state for the game.")
                        (reparse-symbol indented_block_body) [5836 5972])
                    ("to_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5989 5993])
                            ("state" variable nil (reparse-symbol function_parameters) [5995 6000]))                          
                        :documentation "Return the player whose move it is in this state.")
                        (reparse-symbol indented_block_body) [5977 6096])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6113 6117])
                            ("state" variable nil (reparse-symbol function_parameters) [6119 6124]))                          
                        :documentation "Print or otherwise display the state.")
                        (reparse-symbol indented_block_body) [6101 6200])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6218 6222]))                          )
                        (reparse-symbol indented_block_body) [6205 6279])
                    ("play_game" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6298 6302])
                            ("players" variable nil (reparse-symbol function_parameters) [6304 6312]))                          
                        :documentation "Play an n-person, move-alternating game.")
                        (reparse-symbol indented_block_body) [6284 6707]))                  
                :type "class")
                nil [4957 6707])
            ("Fig52Game" type
               (:documentation "The game represented in [Figure 5.2]. Serves as a simple test case."
                :superclasses ("Game")
                :members 
                  ( ("succs" variable nil (reparse-symbol indented_block_body) [6815 7015])
                    ("utils" variable nil (reparse-symbol indented_block_body) [7020 7088])
                    ("initial" variable nil (reparse-symbol indented_block_body) [7093 7106])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7124 7128])
                            ("state" variable nil (reparse-symbol function_parameters) [7130 7135]))                          )
                        (reparse-symbol indented_block_body) [7112 7192])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7208 7212])
                            ("state" variable nil (reparse-symbol function_parameters) [7214 7219])
                            ("move" variable nil (reparse-symbol function_parameters) [7221 7225]))                          )
                        (reparse-symbol indented_block_body) [7197 7267])
                    ("utility" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7284 7288])
                            ("state" variable nil (reparse-symbol function_parameters) [7290 7295])
                            ("player" variable nil (reparse-symbol function_parameters) [7297 7303]))                          )
                        (reparse-symbol indented_block_body) [7272 7423])
                    ("terminal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7446 7450])
                            ("state" variable nil (reparse-symbol function_parameters) [7452 7457]))                          )
                        (reparse-symbol indented_block_body) [7428 7509])
                    ("to_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7526 7530])
                            ("state" variable nil (reparse-symbol function_parameters) [7532 7537]))                          )
                        (reparse-symbol indented_block_body) [7514 7590]))                  
                :type "class")
                nil [6709 7590])
            ("Fig52Extended" type
               (:documentation "Similar to Fig52Game but bigger. Useful for visualisation"
                :superclasses ("Game")
                :members 
                  ( ("succs" variable nil (reparse-symbol indented_block_body) [7692 7754])
                    ("utils" variable nil (reparse-symbol indented_block_body) [7759 7773])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7791 7795])
                            ("state" variable nil (reparse-symbol function_parameters) [7797 7802]))                          )
                        (reparse-symbol indented_block_body) [7779 7867])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7883 7887])
                            ("state" variable nil (reparse-symbol function_parameters) [7889 7894])
                            ("move" variable nil (reparse-symbol function_parameters) [7896 7900]))                          )
                        (reparse-symbol indented_block_body) [7872 7942])
                    ("utility" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7959 7963])
                            ("state" variable nil (reparse-symbol function_parameters) [7965 7970])
                            ("player" variable nil (reparse-symbol function_parameters) [7972 7978]))                          )
                        (reparse-symbol indented_block_body) [7947 8098])
                    ("terminal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8121 8125])
                            ("state" variable nil (reparse-symbol function_parameters) [8127 8132]))                          )
                        (reparse-symbol indented_block_body) [8103 8173])
                    ("to_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8190 8194])
                            ("state" variable nil (reparse-symbol function_parameters) [8196 8201]))                          )
                        (reparse-symbol indented_block_body) [8178 8258]))                  
                :type "class")
                nil [7592 8258])
            ("TicTacToe" type
               (:documentation "Play TicTacToe on an h x v board, with Max (first player) playing 'X'.
    A state has the player to move, a cached utility, a list of moves in
    the form of a list of (x, y) positions, and a board, in the form of
    a dict of {(x, y): Player} entries, where Player is 'X' or 'O'."
                :superclasses ("Game")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8624 8634])
                            ("self" variable nil (reparse-symbol indented_block_body) [8643 8653])
                            ("self" variable nil (reparse-symbol indented_block_body) [8662 8672])
                            ("moves" variable nil (reparse-symbol indented_block_body) [8681 8764])
                            ("self" variable nil (reparse-symbol indented_block_body) [8773 8844]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8594 8598])
                            ("h" variable nil (reparse-symbol function_parameters) [8600 8601])
                            ("v" variable nil (reparse-symbol function_parameters) [8605 8606])
                            ("k" variable nil (reparse-symbol function_parameters) [8610 8611]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8581 8845])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8862 8866])
                            ("state" variable nil (reparse-symbol function_parameters) [8868 8873]))                          
                        :documentation "Legal moves are any square not yet taken.")
                        (reparse-symbol indented_block_body) [8850 8959])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8975 8979])
                            ("state" variable nil (reparse-symbol function_parameters) [8981 8986])
                            ("move" variable nil (reparse-symbol function_parameters) [8988 8992]))                          )
                        (reparse-symbol indented_block_body) [8964 9425])
                    ("utility" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9442 9446])
                            ("state" variable nil (reparse-symbol function_parameters) [9448 9453])
                            ("player" variable nil (reparse-symbol function_parameters) [9455 9461]))                          
                        :documentation "Return the value to player; 1 for win, -1 for loss, 0 otherwise.")
                        (reparse-symbol indented_block_body) [9430 9609])
                    ("terminal_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9632 9636])
                            ("state" variable nil (reparse-symbol function_parameters) [9638 9643]))                          
                        :documentation "A state is terminal if it is won or there are no empty squares.")
                        (reparse-symbol indented_block_body) [9614 9783])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9800 9804])
                            ("state" variable nil (reparse-symbol function_parameters) [9806 9811]))                          )
                        (reparse-symbol indented_block_body) [9788 9999])
                    ("compute_utility" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10024 10028])
                            ("board" variable nil (reparse-symbol function_parameters) [10030 10035])
                            ("move" variable nil (reparse-symbol function_parameters) [10037 10041])
                            ("player" variable nil (reparse-symbol function_parameters) [10043 10049]))                          
                        :documentation "If 'X' wins with this move, return 1; if 'O' wins return -1; else return 0.")
                        (reparse-symbol indented_block_body) [10004 10468])
                    ("k_in_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10486 10490])
                            ("board" variable nil (reparse-symbol function_parameters) [10492 10497])
                            ("move" variable nil (reparse-symbol function_parameters) [10499 10503])
                            ("player" variable nil (reparse-symbol function_parameters) [10505 10511])
                            ("delta_x_y" variable nil (reparse-symbol function_parameters) [10513 10522]))                          
                        :documentation "Return true if there is a line through move on board for player.")
                        (reparse-symbol indented_block_body) [10473 11022]))                  
                :type "class")
                nil [8259 11022])
            ("ConnectFour" type
               (:documentation "A TicTacToe-like game in which you can only make a move on the bottom
    row, or in a square directly above an occupied square.  Traditionally
    played on a 7x6 board and requiring 4 in a row."
                :superclasses ("TicTacToe")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("TicTacToe" code nil (reparse-symbol indented_block_body) [11308 11341]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11278 11282])
                            ("h" variable nil (reparse-symbol function_parameters) [11284 11285])
                            ("v" variable nil (reparse-symbol function_parameters) [11289 11290])
                            ("k" variable nil (reparse-symbol function_parameters) [11294 11295]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11265 11342])
                    ("actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11359 11363])
                            ("state" variable nil (reparse-symbol function_parameters) [11365 11370]))                          )
                        (reparse-symbol indented_block_body) [11347 11478]))                  
                :type "class")
                nil [11024 11478]))          
      :file "games.py"
      :pointmax 11478
      :fsize 11477
      :lastmodtime '(23159 25875 578560 475000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Knowledge in learning, Chapter 19\"\"\"" code nil nil [1 40])
            ("random" include nil nil [42 68])
            ("math" include nil nil [69 89])
            ("utils" include nil nil [90 116])
            ("collections" include nil nil [117 152])
            ("itertools" include nil nil [153 196])
            ("" code nil nil [215 351])
            ("current_best_learning" function
               (:documentation " [Figure 19.2]
    The hypothesis is a list of dictionaries, with each dictionary representing
    a disjunction."
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [462 470])
                    ("h" variable nil (reparse-symbol function_parameters) [472 473])
                    ("examples_so_far" variable nil (reparse-symbol function_parameters) [475 490]))                  )
                nil [436 1257])
            ("specializations" function
               (:documentation "Specialize the hypothesis by adding AND operations to the disjunctions"
                :arguments 
                  ( ("examples_so_far" variable nil (reparse-symbol function_parameters) [1279 1294])
                    ("h" variable nil (reparse-symbol function_parameters) [1296 1297]))                  )
                nil [1259 1853])
            ("generalizations" function
               (:documentation "Generalize the hypothesis. First delete operations
    (including disjunctions) from the hypothesis. Then, add OR operations."
                :arguments 
                  ( ("examples_so_far" variable nil (reparse-symbol function_parameters) [1875 1890])
                    ("h" variable nil (reparse-symbol function_parameters) [1892 1893]))                  )
                nil [1855 2951])
            ("add_or" function
               (:documentation "Adds an OR operation to the hypothesis. The AND operations in the disjunction
    are generated by the last example (which is the problematic one)."
                :arguments 
                  ( ("examples_so_far" variable nil (reparse-symbol function_parameters) [2964 2979])
                    ("h" variable nil (reparse-symbol function_parameters) [2981 2982]))                  )
                nil [2953 3528])
            ("version_space_learning" function
               (:documentation " [Figure 19.3]
    The version space is a list of hypotheses, which in turn are a list
    of dictionaries/disjunctions."
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [3639 3647]))                  )
                nil [3612 3908])
            ("version_space_update" function (:arguments 
              ( ("V" variable nil (reparse-symbol function_parameters) [3935 3936])
                ("e" variable nil (reparse-symbol function_parameters) [3938 3939]))              ) nil [3910 3991])
            ("all_hypotheses" function
               (:documentation "Builds a list of all the possible hypotheses"
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [4012 4020]))                  )
                nil [3993 4342])
            ("values_table" function
               (:documentation "Builds a table with all the possible values for each attribute.
    Returns a dictionary with keys the attribute names and values a list
    with the possible values for the corresponding attribute."
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [4361 4369]))                  )
                nil [4344 4928])
            ("build_attr_combinations" function
               (:documentation "Given a set of attributes, builds all the combinations of values.
    If the set holds more than one attribute, recursively builds the
    combinations."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4958 4959])
                    ("values" variable nil (reparse-symbol function_parameters) [4961 4967]))                  )
                nil [4930 5616])
            ("build_h_combinations" function
               (:documentation "Given a set of hypotheses, builds and returns all the combinations of the
    hypotheses."
                :arguments 
                  ( ("hypotheses" variable nil (reparse-symbol function_parameters) [5643 5653]))                  )
                nil [5618 5948])
            ("minimal_consistent_det" function
               (:documentation "Returns a minimal set of attributes which give consistent determination"
                :arguments 
                  ( ("E" variable nil (reparse-symbol function_parameters) [6059 6060])
                    ("A" variable nil (reparse-symbol function_parameters) [6062 6063]))                  )
                nil [6032 6301])
            ("consistent_det" function
               (:documentation "Checks if the attributes(A) is consistent with the examples(E)"
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [6322 6323])
                    ("E" variable nil (reparse-symbol function_parameters) [6325 6326]))                  )
                nil [6303 6619])
            ("FOIL_container" type
               (:documentation "Holds the kb and other necessary elements required by FOIL"
                :superclasses ("FolKB")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6846 6869])
                            ("self" variable nil (reparse-symbol indented_block_body) [6878 6900])
                            ("FolKB" code nil (reparse-symbol indented_block_body) [6909 6938]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6819 6823])
                            ("clauses" variable nil (reparse-symbol function_parameters) [6825 6832]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6806 6939])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6953 6957])
                            ("sentence" variable nil (reparse-symbol function_parameters) [6959 6967]))                          )
                        (reparse-symbol indented_block_body) [6944 7267])
                    ("foil" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7281 7285])
                            ("examples" variable nil (reparse-symbol function_parameters) [7287 7295])
                            ("target" variable nil (reparse-symbol function_parameters) [7297 7303]))                          
                        :documentation "Learns a list of first-order horn clauses
        'examples' is a tuple: (positive_examples, negative_examples).
        positive_examples and negative_examples are both lists which contain substitutions.")
                        (reparse-symbol indented_block_body) [7272 7953])
                    ("new_clause" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7973 7977])
                            ("examples" variable nil (reparse-symbol function_parameters) [7979 7987])
                            ("target" variable nil (reparse-symbol function_parameters) [7989 7995]))                          
                        :documentation "Finds a horn clause which satisfies part of the positive
        examples but none of the negative examples.
        The horn clause is specified as [consequent, list of antecedents]
        Return value is the tuple (horn_clause, extended_positive_examples)")
                        (reparse-symbol indented_block_body) [7958 8759])
                    ("extend_example" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8783 8787])
                            ("example" variable nil (reparse-symbol function_parameters) [8789 8796])
                            ("literal" variable nil (reparse-symbol function_parameters) [8798 8805]))                          
                        :documentation "Generates extended examples which satisfy the literal")
                        (reparse-symbol indented_block_body) [8764 9042])
                    ("new_literals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9064 9068])
                            ("clause" variable nil (reparse-symbol function_parameters) [9070 9076]))                          
                        :documentation "Generates new literals based on known predicate symbols.
        Generated literal must share atleast one variable with clause")
                        (reparse-symbol indented_block_body) [9047 9657])
                    ("choose_literal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9681 9685])
                            ("literals" variable nil (reparse-symbol function_parameters) [9687 9695])
                            ("examples" variable nil (reparse-symbol function_parameters) [9697 9705]))                          
                        :documentation "Chooses the best literal based on the information gain")
                        (reparse-symbol indented_block_body) [9662 10717])
                    ("update_examples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10742 10746])
                            ("target" variable nil (reparse-symbol function_parameters) [10748 10754])
                            ("examples" variable nil (reparse-symbol function_parameters) [10756 10764])
                            ("extended_examples" variable nil (reparse-symbol function_parameters) [10766 10783]))                          
                        :documentation "Adds to the kb those examples what are represented in extended_examples
        List of omitted examples is returned")
                        (reparse-symbol indented_block_body) [10722 11266]))                  
                :type "class")
                nil [6703 11266])
            ("check_all_consistency" function
               (:documentation "Check for the consistency of all examples under h"
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [11377 11385])
                    ("h" variable nil (reparse-symbol function_parameters) [11387 11388]))                  )
                nil [11351 11552])
            ("check_negative_consistency" function
               (:documentation "Check if the negative examples are consistent under h"
                :arguments 
                  ( ("examples" variable nil (reparse-symbol function_parameters) [11585 11593])
                    ("h" variable nil (reparse-symbol function_parameters) [11595 11596]))                  )
                nil [11554 11810])
            ("disjunction_value" function
               (:documentation "The value of example e under disjunction d"
                :arguments 
                  ( ("e" variable nil (reparse-symbol function_parameters) [11834 11835])
                    ("d" variable nil (reparse-symbol function_parameters) [11837 11838]))                  )
                nil [11812 12157])
            ("guess_value" function
               (:documentation "Guess value of example e under hypothesis h"
                :arguments 
                  ( ("e" variable nil (reparse-symbol function_parameters) [12175 12176])
                    ("h" variable nil (reparse-symbol function_parameters) [12178 12179]))                  )
                nil [12159 12330])
            ("is_consistent" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [12350 12351])
                ("h" variable nil (reparse-symbol function_parameters) [12353 12354]))              ) nil [12332 12399])
            ("false_positive" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [12420 12421])
                ("h" variable nil (reparse-symbol function_parameters) [12423 12424]))              ) nil [12401 12526])
            ("false_negative" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [12547 12548])
                ("h" variable nil (reparse-symbol function_parameters) [12550 12551]))              ) nil [12528 12656]))          
      :file "knowledge.py"
      :pointmax 12656
      :fsize 12655
      :lastmodtime '(23159 25875 593317 210000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Representations and Inference for Logic (Chapters 7-9, 12)

Covers both Propositional and First-Order Logic. First we have four
important data types:

    KB            Abstract class holds a knowledge base of logical expressions
    KB_Agent      Abstract class subclasses agents.Agent
    Expr          A logical expression, imported from utils.py
    substitution  Implemented as a dictionary of var:value pairs, {x:1, y:x}

Be careful: some functions take an Expr as argument, and some take a KB.

Logical expressions can be created with Expr or expr, imported from utils, TODO
or with expr, which adds the capability to write a string that uses
the connectives ==>, <==, <=>, or <=/=>. But be careful: these have the
operator precedence of commas; you may need to add parens to make precedence work.
See logic.ipynb for examples.

Then we implement various functions for doing logical inference:

    pl_true          Evaluate a propositional logical sentence in a model
    tt_entails       Say if a statement is entailed by a KB
    pl_resolution    Do resolution on propositional sentences
    dpll_satisfiable See if a propositional sentence is satisfiable
    WalkSAT          Try to find a solution for a set of clauses

And a few other functions:

    to_cnf           Convert to conjunctive normal form
    unify            Do unification of two FOL sentences
    diff, simp       Symbolic differentiation and simplification
\"\"\"" code nil nil [1 1445])
            ("" code nil nil [1465 1572])
            ("agents" include nil nil [1573 1586])
            ("itertools" include nil nil [1588 1604])
            ("random" include nil nil [1605 1618])
            ("collections" include nil nil [1619 1654])
            ("KB" type
               (:documentation "A knowledge base to which you can tell and ask sentences.
    To create a KB, first subclass this class and implement
    tell, ask_generator, and retract.  Why ask_generator instead of ask?
    The book is a bit vague on what ask means --
    For a Propositional Logic KB, ask(P & Q) returns True or False, but for an
    FOL KB, something like ask(Brother(x, y)) might return many substitutions
    such as {x: Cain, y: Abel}, {x: Abel, y: Cain}, {x: George, y: Jeb}, etc.
    So ask_generator generates these one at a time, and ask either returns the
    first one or returns False."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("raise" code nil (reparse-symbol indented_block_body) [2394 2419]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2364 2368])
                            ("sentence" variable nil (reparse-symbol function_parameters) [2370 2378]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2351 2420])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2434 2438])
                            ("sentence" variable nil (reparse-symbol function_parameters) [2440 2448]))                          
                        :documentation "Add the sentence to the KB.")
                        (reparse-symbol indented_block_body) [2425 2527])
                    ("ask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2540 2544])
                            ("query" variable nil (reparse-symbol function_parameters) [2546 2551]))                          
                        :documentation "Return a substitution that makes the query true, or, failing that, return False.")
                        (reparse-symbol indented_block_body) [2532 2712])
                    ("ask_generator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2735 2739])
                            ("query" variable nil (reparse-symbol function_parameters) [2741 2746]))                          
                        :documentation "Yield all the substitutions that make query true.")
                        (reparse-symbol indented_block_body) [2717 2847])
                    ("retract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2864 2868])
                            ("sentence" variable nil (reparse-symbol function_parameters) [2870 2878]))                          
                        :documentation "Remove sentence from the KB.")
                        (reparse-symbol indented_block_body) [2852 2958]))                  
                :type "class")
                nil [1739 2958])
            ("PropKB" type
               (:documentation "A KB for propositional logic. Inefficient, with no indexing."
                :superclasses ("KB")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3097 3114])
                            ("if" code nil (reparse-symbol indented_block_body) [3123 3168]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3067 3071])
                            ("sentence" variable nil (reparse-symbol function_parameters) [3073 3081]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3054 3168])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3182 3186])
                            ("sentence" variable nil (reparse-symbol function_parameters) [3188 3196]))                          
                        :documentation "Add the sentence's clauses to the KB.")
                        (reparse-symbol indented_block_body) [3173 3308])
                    ("ask_generator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3331 3335])
                            ("query" variable nil (reparse-symbol function_parameters) [3337 3342]))                          
                        :documentation "Yield the empty substitution {} if KB entails query; else no results.")
                        (reparse-symbol indented_block_body) [3313 3506])
                    ("ask_if_true" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3527 3531])
                            ("query" variable nil (reparse-symbol function_parameters) [3533 3538]))                          
                        :documentation "Return True if the KB entails query, else return False.")
                        (reparse-symbol indented_block_body) [3511 3700])
                    ("retract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3717 3721])
                            ("sentence" variable nil (reparse-symbol function_parameters) [3723 3731]))                          
                        :documentation "Remove the sentence's clauses from the KB.")
                        (reparse-symbol indented_block_body) [3705 3910]))                  
                :type "class")
                nil [2960 3910])
            ("KB_AgentProgram" function
               (:documentation "A generic logical knowledge-based agent program. [Figure 7.1]"
                :arguments 
                  ( ("KB" variable nil (reparse-symbol function_parameters) [4014 4016]))                  )
                nil [3994 4628])
            ("is_symbol" function
               (:documentation "A string s is a symbol if it starts with an alphabetic char."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4644 4645]))                  )
                nil [4630 4769])
            ("is_var_symbol" function
               (:documentation "A logic variable symbol is an initial-lowercase string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4789 4790]))                  )
                nil [4771 4902])
            ("is_prop_symbol" function
               (:documentation "A proposition logic symbol is an initial-uppercase string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4923 4924]))                  )
                nil [4904 5039])
            ("variables" function
               (:documentation "Return a set of the variables in expression s.
    >>> variables(expr('F(x, x) & G(x, y) & H(y, z) & R(A, z, 2)')) == {x, y, z}
    True
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5055 5056]))                  )
                nil [5041 5271])
            ("is_definite_clause" function
               (:documentation "Returns True for exprs s of the form A & B & ... & C ==> D,
    where all literals are positive.  In clause form, this is
    ~A | ~B | ... | ~C | D, where exactly one clause is positive.
    >>> is_definite_clause(expr('Farmer(Mac)'))
    True
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5296 5297]))                  )
                nil [5273 5817])
            ("parse_definite_clause" function
               (:documentation "Return the antecedents and the consequent of a definite clause."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5845 5846]))                  )
                nil [5819 6100])
            ("A, B, C, D, E, F, G, P, Q, x, y, z" code nil nil [6153 6215])
            ("tt_entails" function
               (:documentation "Does kb entail the sentence alpha? Use truth tables. For propositional
    kb's and sentences. [Figure 7.10]. Note that the 'kb' should be an
    Expr which is a conjunction of clauses.
    >>> tt_entails(expr('P & Q'), expr('Q'))
    True
    "
                :arguments 
                  ( ("kb" variable nil (reparse-symbol function_parameters) [6316 6318])
                    ("alpha" variable nil (reparse-symbol function_parameters) [6320 6325]))                  )
                nil [6301 6708])
            ("tt_check_all" function
               (:documentation "Auxiliary routine to implement tt_entails."
                :arguments 
                  ( ("kb" variable nil (reparse-symbol function_parameters) [6727 6729])
                    ("alpha" variable nil (reparse-symbol function_parameters) [6731 6736])
                    ("symbols" variable nil (reparse-symbol function_parameters) [6738 6745])
                    ("model" variable nil (reparse-symbol function_parameters) [6747 6752]))                  )
                nil [6710 7207])
            ("prop_symbols" function
               (:documentation "Return the set of all propositional symbols in x."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7226 7227]))                  )
                nil [7209 7477])
            ("constant_symbols" function
               (:documentation "Return the set of all constant symbols in x."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7500 7501]))                  )
                nil [7479 7765])
            ("predicate_symbols" function
               (:documentation "Return a set of (symbol_name, arity) in x.
    All symbols (even functional) with arity > 0 are considered."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7789 7790]))                  )
                nil [7767 8155])
            ("tt_true" function
               (:documentation "Is a propositional sentence a tautology?
    >>> tt_true('P | ~P')
    True
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8169 8170]))                  )
                nil [8157 8311])
            ("pl_true" function
               (:documentation "Return True if the propositional logic expression is true in the model,
    and False if it is false. If the model does not specify the value for
    every proposition, this may return None to indicate 'not obvious';
    this may happen even when the expression is tautological."
                :arguments 
                  ( ("exp" variable nil (reparse-symbol function_parameters) [8325 8328])
                    ("model" variable nil (reparse-symbol function_parameters) [8330 8335]))                  )
                nil [8313 9848])
            ("to_cnf" function
               (:documentation "Convert a propositional logical sentence to conjunctive normal form.
    That is, to the form ((A | ~B | ...) & (B | C | ...) & ...) [p. 253]
    >>> to_cnf('~(B | C)')
    (~B & ~C)
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9987 9988]))                  )
                nil [9976 10397])
            ("eliminate_implications" function
               (:documentation "Change implications into equivalent form with only &, |, and ~ as logical operators."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10426 10427]))                  )
                nil [10399 11052])
            ("move_not_inwards" function
               (:documentation "Rewrite sentence s by moving negation sign inward.
    >>> move_not_inwards(~(A | B))
    (~A & ~B)"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11075 11076]))                  )
                nil [11054 11703])
            ("distribute_and_over_or" function
               (:documentation "Given a sentence s consisting of conjunctions and disjunctions
    of literals, return an equivalent sentence in CNF.
    >>> distribute_and_over_or((A & B) | C)
    ((A | C) & (B | C))
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11732 11733]))                  )
                nil [11705 12646])
            ("associate" function
               (:documentation "Given an associative op, return an expression with the same
    meaning as Expr(op, *args), but flattened -- that is, with nested
    instances of the same op promoted to the top level.
    >>> associate('&', [(A&B),(B|C),(B&C)])
    (A & B & (B | C) & B & C)
    >>> associate('|', [A|(B|(C|(A&B)))])
    (A | B | C | (A & B))
    "
                :arguments 
                  ( ("op" variable nil (reparse-symbol function_parameters) [12662 12664])
                    ("args" variable nil (reparse-symbol function_parameters) [12666 12670]))                  )
                nil [12648 13192])
            ("_op_identity" variable nil nil [13194 13248])
            ("dissociate" function
               (:documentation "Given an associative op, return a flattened list result such
    that Expr(op, *result) means the same as Expr(op, *args)."
                :arguments 
                  ( ("op" variable nil (reparse-symbol function_parameters) [13266 13268])
                    ("args" variable nil (reparse-symbol function_parameters) [13270 13274]))                  )
                nil [13251 13633])
            ("conjuncts" function
               (:documentation "Return a list of the conjuncts in the sentence s.
    >>> conjuncts(A & B)
    [A, B]
    >>> conjuncts(A | B)
    [(A | B)]
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13649 13650]))                  )
                nil [13635 13825])
            ("disjuncts" function
               (:documentation "Return a list of the disjuncts in the sentence s.
    >>> disjuncts(A | B)
    [A, B]
    >>> disjuncts(A & B)
    [(A & B)]
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13841 13842]))                  )
                nil [13827 14017])
            ("pl_resolution" function
               (:documentation "Propositional-logic resolution: say if alpha follows from KB. [Figure 7.12]"
                :arguments 
                  ( ("KB" variable nil (reparse-symbol function_parameters) [14119 14121])
                    ("alpha" variable nil (reparse-symbol function_parameters) [14123 14128]))                  )
                nil [14101 14765])
            ("pl_resolve" function
               (:documentation "Return all clauses that can be obtained by resolving clauses ci and cj."
                :arguments 
                  ( ("ci" variable nil (reparse-symbol function_parameters) [14782 14784])
                    ("cj" variable nil (reparse-symbol function_parameters) [14786 14788]))                  )
                nil [14767 15184])
            ("PropDefiniteKB" type
               (:documentation "A KB of propositional definite clauses."
                :superclasses ("PropKB")
                :members 
                  ( ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15362 15366])
                            ("sentence" variable nil (reparse-symbol function_parameters) [15368 15376]))                          
                        :documentation "Add a definite clause to this KB.")
                        (reparse-symbol indented_block_body) [15353 15536])
                    ("ask_generator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15559 15563])
                            ("query" variable nil (reparse-symbol function_parameters) [15565 15570]))                          
                        :documentation "Yield the empty substitution if KB implies query; else nothing.")
                        (reparse-symbol indented_block_body) [15541 15719])
                    ("retract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15736 15740])
                            ("sentence" variable nil (reparse-symbol function_parameters) [15742 15750]))                          )
                        (reparse-symbol indented_block_body) [15724 15791])
                    ("clauses_with_premise" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15821 15825])
                            ("p" variable nil (reparse-symbol function_parameters) [15827 15828]))                          
                        :documentation "Return a list of the clauses in KB that have p in their premise.
        This could be cached away for O(1) speed, but we'll recompute it.")
                        (reparse-symbol indented_block_body) [15796 16088]))                  
                :type "class")
                nil [15268 16088])
            ("pl_fc_entails" function
               (:documentation "Use forward chaining to see if a PropDefiniteKB entails symbol q.
    [Figure 7.15]
    >>> pl_fc_entails(horn_clauses_KB, expr('Q'))
    True
    "
                :arguments 
                  ( ("KB" variable nil (reparse-symbol function_parameters) [16108 16110])
                    ("q" variable nil (reparse-symbol function_parameters) [16112 16113]))                  )
                nil [16090 16794])
            ("\"\"\" [Figure 7.13]
Simple inference in a wumpus world example
\"\"\"" code nil nil [16796 16860])
            ("wumpus_world_inference" variable nil nil [16861 16924])
            ("\"\"\" [Figure 7.16]
Propositional Logic Forward Chaining example
\"\"\"" code nil nil [16927 16993])
            ("horn_clauses_KB" variable nil nil [16994 17028])
            ("for" code nil nil [17029 17141])
            ("dpll_satisfiable" function
               (:documentation "Check satisfiability of a propositional sentence.
    This differs from the book code in two ways: (1) it returns a model
    rather than True when it succeeds; this is more useful. (2) The
    function find_pure_symbol is passed a list of unknown clauses, rather
    than a list of all clauses and the model; this is more efficient."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [17279 17280]))                  )
                nil [17258 17736])
            ("dpll" function
               (:documentation "See if the clauses are true in a partial model."
                :arguments 
                  ( ("clauses" variable nil (reparse-symbol function_parameters) [17747 17754])
                    ("symbols" variable nil (reparse-symbol function_parameters) [17756 17763])
                    ("model" variable nil (reparse-symbol function_parameters) [17765 17770]))                  )
                nil [17738 18642])
            ("find_pure_symbol" function
               (:documentation "Find a symbol and its value if it appears only as a positive literal
    (or only as a negative) in clauses.
    >>> find_pure_symbol([A, B, C], [A|~B,~B|~C,C|A])
    (A, True)
    "
                :arguments 
                  ( ("symbols" variable nil (reparse-symbol function_parameters) [18665 18672])
                    ("clauses" variable nil (reparse-symbol function_parameters) [18674 18681]))                  )
                nil [18644 19228])
            ("find_unit_clause" function
               (:documentation "Find a forced assignment if possible from a clause with only 1
    variable not bound in the model.
    >>> find_unit_clause([A|B|C, B|~C, ~A|~B], {A:True})
    (B, False)
    "
                :arguments 
                  ( ("clauses" variable nil (reparse-symbol function_parameters) [19251 19258])
                    ("model" variable nil (reparse-symbol function_parameters) [19260 19265]))                  )
                nil [19230 19599])
            ("unit_clause_assign" function
               (:documentation "Return a single variable/value pair that makes clause true in
    the model, if possible.
    >>> unit_clause_assign(A|B|C, {A:True})
    (None, None)
    >>> unit_clause_assign(B|~C, {A:True})
    (None, None)
    >>> unit_clause_assign(~A|~B, {A:True})
    (B, False)
    "
                :arguments 
                  ( ("clause" variable nil (reparse-symbol function_parameters) [19624 19630])
                    ("model" variable nil (reparse-symbol function_parameters) [19632 19637]))                  )
                nil [19601 20312])
            ("inspect_literal" function
               (:documentation "The symbol in this literal, and the value it should take to
    make the literal true.
    >>> inspect_literal(P)
    (P, True)
    >>> inspect_literal(~P)
    (P, False)
    "
                :arguments 
                  ( ("literal" variable nil (reparse-symbol function_parameters) [20334 20341]))                  )
                nil [20314 20633])
            ("WalkSAT" function
               (:documentation "Checks for satisfiability of all clauses by randomly flipping values of variables
    "
                :arguments 
                  ( ("clauses" variable nil (reparse-symbol function_parameters) [20754 20761])
                    ("p" variable nil (reparse-symbol function_parameters) [20763 20764])
                    ("max_flips" variable nil (reparse-symbol function_parameters) [20770 20779]))                  )
                nil [20742 22143])
            ("HybridWumpusAgent" type
               (:documentation "An agent for the wumpus world that does logical inference. [Figure 7.20]"
                :superclasses ("agents.Agent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("raise" code nil (reparse-symbol indented_block_body) [22382 22407]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22367 22371]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22354 22408]))                  
                :type "class")
                nil [22227 22408])
            ("plan_route" function (:arguments 
              ( ("current" variable nil (reparse-symbol function_parameters) [22425 22432])
                ("goals" variable nil (reparse-symbol function_parameters) [22434 22439])
                ("allowed" variable nil (reparse-symbol function_parameters) [22441 22448]))              ) nil [22410 22481])
            ("SAT_plan" function
               (:documentation "Converts a planning problem to Satisfaction problem by translating it to a cnf sentence.
    [Figure 7.22]"
                :arguments 
                  ( ("init" variable nil (reparse-symbol function_parameters) [22578 22582])
                    ("transition" variable nil (reparse-symbol function_parameters) [22584 22594])
                    ("goal" variable nil (reparse-symbol function_parameters) [22596 22600])
                    ("t_max" variable nil (reparse-symbol function_parameters) [22602 22607])
                    ("SAT_solver" variable nil (reparse-symbol function_parameters) [22609 22619]))                  )
                nil [22565 25760])
            ("unify" function
               (:documentation "Unify expressions x,y with substitution s; return a substitution that
    would make x,y equal, or None if x,y can not unify. x and y can be
    variables (e.g. Expr('x')), constants, lists, or Exprs. [Figure 9.1]"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [25855 25856])
                    ("y" variable nil (reparse-symbol function_parameters) [25858 25859])
                    ("s" variable nil (reparse-symbol function_parameters) [25861 25862]))                  )
                nil [25845 26655])
            ("is_variable" function
               (:documentation "A variable is an Expr with no args and a lowercase symbol as the op."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [26673 26674]))                  )
                nil [26657 26824])
            ("unify_var" function (:arguments 
              ( ("var" variable nil (reparse-symbol function_parameters) [26840 26843])
                ("x" variable nil (reparse-symbol function_parameters) [26845 26846])
                ("s" variable nil (reparse-symbol function_parameters) [26848 26849]))              ) nil [26826 27052])
            ("occur_check" function
               (:documentation "Return true if variable var occurs anywhere in x
    (or in subst(s, x), if s has a binding for x)."
                :arguments 
                  ( ("var" variable nil (reparse-symbol function_parameters) [27070 27073])
                    ("x" variable nil (reparse-symbol function_parameters) [27075 27076])
                    ("s" variable nil (reparse-symbol function_parameters) [27078 27079]))                  )
                nil [27054 27557])
            ("extend" function
               (:documentation "Copy the substitution s and extend it by setting var to val; return copy."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [27570 27571])
                    ("var" variable nil (reparse-symbol function_parameters) [27573 27576])
                    ("val" variable nil (reparse-symbol function_parameters) [27578 27581]))                  )
                nil [27559 27718])
            ("subst" function
               (:documentation "Substitute the substitution s into the expression x.
    >>> subst({x: 42, y:0}, F(x) + y)
    (F(42) + 0)
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [27730 27731])
                    ("x" variable nil (reparse-symbol function_parameters) [27733 27734]))                  )
                nil [27720 28189])
            ("standardize_variables" function
               (:documentation "Replace all the variables in sentence with new variables."
                :arguments 
                  ( ("sentence" variable nil (reparse-symbol function_parameters) [28217 28225])
                    ("dic" variable nil (reparse-symbol function_parameters) [28227 28230]))                  )
                nil [28191 28762])
            ("standardize_variables" variable nil nil [28764 28813])
            ("FolKB" type
               (:documentation "A knowledge base consisting of first-order definite clauses.
    >>> kb0 = FolKB([expr('Farmer(Mac)'), expr('Rabbit(Pete)'),
    ...              expr('(Rabbit(r) & Farmer(f)) ==> Hates(f, r)')])
    >>> kb0.tell(expr('Rabbit(Flopsie)'))
    >>> kb0.retract(expr('Rabbit(Pete)'))
    >>> kb0.ask(expr('Hates(Mac, x)'))[x]
    Flopsie
    >>> kb0.ask(expr('Wife(Pete, x)'))
    False
    "
                :superclasses ("KB")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [29366 29383])
                            ("for" code nil (reparse-symbol indented_block_body) [29420 29481]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29331 29335])
                            ("initial_clauses" variable nil (reparse-symbol function_parameters) [29337 29352]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29318 29481])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29495 29499])
                            ("sentence" variable nil (reparse-symbol function_parameters) [29501 29509]))                          )
                        (reparse-symbol indented_block_body) [29486 29683])
                    ("ask_generator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29706 29710])
                            ("query" variable nil (reparse-symbol function_parameters) [29712 29717]))                          )
                        (reparse-symbol indented_block_body) [29688 29759])
                    ("retract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29776 29780])
                            ("sentence" variable nil (reparse-symbol function_parameters) [29782 29790]))                          )
                        (reparse-symbol indented_block_body) [29764 29831])
                    ("fetch_rules_for_goal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29861 29865])
                            ("goal" variable nil (reparse-symbol function_parameters) [29867 29871]))                          )
                        (reparse-symbol indented_block_body) [29836 29902]))                  
                :type "class")
                nil [28898 29902])
            ("fol_fc_ask" function
               (:documentation "A simple forward-chaining algorithm. [Figure 9.3]"
                :arguments 
                  ( ("KB" variable nil (reparse-symbol function_parameters) [29919 29921])
                    ("alpha" variable nil (reparse-symbol function_parameters) [29923 29928]))                  )
                nil [29904 31171])
            ("fol_bc_ask" function
               (:documentation "A simple backward-chaining algorithm for first-order logic. [Figure 9.6]
    KB should be an instance of FolKB, and query an atomic sentence."
                :arguments 
                  ( ("KB" variable nil (reparse-symbol function_parameters) [31188 31190])
                    ("query" variable nil (reparse-symbol function_parameters) [31192 31197]))                  )
                nil [31173 31388])
            ("fol_bc_or" function (:arguments 
              ( ("KB" variable nil (reparse-symbol function_parameters) [31404 31406])
                ("goal" variable nil (reparse-symbol function_parameters) [31408 31412])
                ("theta" variable nil (reparse-symbol function_parameters) [31414 31419]))              ) nil [31390 31632])
            ("fol_bc_and" function (:arguments 
              ( ("KB" variable nil (reparse-symbol function_parameters) [31649 31651])
                ("goals" variable nil (reparse-symbol function_parameters) [31653 31658])
                ("theta" variable nil (reparse-symbol function_parameters) [31660 31665]))              ) nil [31634 31945])
            ("wumpus_kb" variable nil nil [32050 32070])
            ("P11, P12, P21, P22, P31, B11, B21" code nil nil [32072 32149])
            ("wumpus_kb" code nil nil [32150 32170])
            ("wumpus_kb" code nil nil [32171 32214])
            ("wumpus_kb" code nil nil [32215 32264])
            ("wumpus_kb" code nil nil [32265 32285])
            ("wumpus_kb" code nil nil [32286 32305])
            ("test_kb" variable nil nil [32307 32910])
            ("crime_kb" variable nil nil [32912 33338])
            ("diff" function
               (:documentation "Return the symbolic derivative, dy/dx, as an Expr.
    However, you probably want to simplify the results with simp.
    >>> diff(x * x, x)
    ((x * 1) + (x * 1))
    "
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [33625 33626])
                    ("x" variable nil (reparse-symbol function_parameters) [33628 33629]))                  )
                nil [33616 34692])
            ("simp" function
               (:documentation "Simplify the expression x."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [34703 34704]))                  )
                nil [34694 36173])
            ("d" function
               (:documentation "Differentiate and then simplify."
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [36181 36182])
                    ("x" variable nil (reparse-symbol function_parameters) [36184 36185]))                  )
                nil [36175 36259]))          
      :file "logic.py"
      :pointmax 36259
      :fsize 36258
      :lastmodtime '(23159 25875 607404 395000)
      :unmatched-syntax '((NAME 7982 . 7990) (IF 8015 . 8017) (ELSE 8039 . 8043)))
    (semanticdb-table "semanticdb-table"
      :file "agents.py"
      :fsize 33722
      :lastmodtime '(23159 25875 574930 699000)))
  :file "!Users!jihaoyu!Documents!UMASSCourses!683_AI!textcode!aima-python!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
